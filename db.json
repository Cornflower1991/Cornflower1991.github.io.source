{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.css","path":"main.css","modified":0,"renderable":1},{"_id":"source/uploads/images/avatar.jpg","path":"uploads/images/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/yilia/source/fonts/default-skin.svg","path":"fonts/default-skin.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/icomoon.eot","path":"fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/icomoon.ttf","path":"fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/icomoon.svg","path":"fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/icomoon.woff","path":"fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.js","path":"main.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1479709250000},{"_id":"themes/yilia/_config.yml","hash":"cc69a0325f011665c77018b6657bd2aee2d7322f","modified":1524640678000},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1479709250000},{"_id":"themes/yilia/README.md","hash":"9b4c1fa6eda1bcb158d40abab29798229152dd21","modified":1479709250000},{"_id":"themes/yilia/package.json","hash":"3133f9792e28ae20a16f27fdec682e051dbf21c0","modified":1479709250000},{"_id":"themes/yilia/webpack.config.js","hash":"1cc836dc29277fd211233849867fd58bc64a0d3b","modified":1479709250000},{"_id":"source/_posts/AppVeyor test.md","hash":"fb6ccbd3836e18878dca24a4f6b15a8987843127","modified":1524640668000},{"_id":"source/_posts/android-tips.md","hash":"7eef721e53e1417cfcdf64bde28fd172c69d249b","modified":1479719646000},{"_id":"source/_posts/Hello.md","hash":"9f84e3ab6ec735376856467e8a4022cf2aebbd89","modified":1479717996000},{"_id":"source/_posts/SQLite.md","hash":"8177c5ffec8e894032d29d6d449db3b41f853b65","modified":1479798724000},{"_id":"source/_posts/git.md","hash":"8e9c905196d5a562d2f5ba415632867255f03a60","modified":1479718422000},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1479709250000},{"_id":"source/_posts/memory leak.md","hash":"caa88e6c3555d8b45180243a8d2a44fcdf1c4102","modified":1479811626000},{"_id":"themes/yilia/.git/config","hash":"24300cece9d72967ea63724bdb2a8e3c2ac2cc52","modified":1479709250000},{"_id":"source/_posts/xposed.md","hash":"2e999d0caecb8c3c7ddbbbbfb4eaad0d28bb96a5","modified":1479721910000},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1479709158000},{"_id":"themes/yilia/.git/index","hash":"ef260f945b5b9f9225eded7a2c72da76448d49ed","modified":1524640679000},{"_id":"themes/yilia/.git/packed-refs","hash":"66e5b3c358108538085741207eca84fea5dcbebf","modified":1479709250000},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1479709250000},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1479709250000},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1479709250000},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1479709250000},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1479709250000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1479709250000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1479709250000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1479709250000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1479709250000},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1479709250000},{"_id":"themes/yilia/layout/layout.ejs","hash":"6759bdc3646d6c03f9dbc7abffcb2b5e4522c724","modified":1479709250000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1479709250000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1479709250000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1479709250000},{"_id":"themes/yilia/source/main.css","hash":"4b06fabc1363734247fe781a77bb12b5a3bc405e","modified":1479709250000},{"_id":"source/uploads/images/avatar.jpg","hash":"3de0c9025fa014187ee21ed72b756589584b9050","modified":1479288684000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1479709158000},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1479709158000},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1479709158000},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1479709158000},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1479709158000},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1479709158000},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1479709158000},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1479709158000},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1479709158000},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1479709158000},{"_id":"themes/yilia/.git/logs/HEAD","hash":"a468a4604c53a5b105fb718e198d0bbfe09d2e3e","modified":1479709250000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"322fc94d2cb7d798232164e4de91daa727722c06","modified":1479709250000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1479709250000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1479709250000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"3f06859cd91d8ee6ada026914b590f37d56ec4cc","modified":1479709250000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1479709250000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"0d5f8d8f4c1aefcf34f816cb8ebda41a8926b547","modified":1479709250000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1479709250000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"5b4597ddf03486fc15fd6ae77fd05582cbfdff13","modified":1479709250000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1479709250000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"5f040ce3efed03adc5a0725187522bca800460f4","modified":1479709250000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"63d53c26f6ef7d2b4d96de3a2d3d7bd385f8dfda","modified":1479709250000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1479709250000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"fe0fd2f17b14d3fedfef43b6acadead38183b2a2","modified":1479709250000},{"_id":"themes/yilia/source/fonts/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1479709250000},{"_id":"themes/yilia/source/fonts/icomoon.eot","hash":"9a661069e1255d10032926a8ef87502f445f4e20","modified":1479709250000},{"_id":"themes/yilia/source/fonts/icomoon.ttf","hash":"9f1e824fc076dbfedf186609a2664558d5e3e986","modified":1479709250000},{"_id":"themes/yilia/source/fonts/icomoon.svg","hash":"2f9c8a34e40173ab8b6e3f0f761ece4d2b7a8f68","modified":1479709250000},{"_id":"themes/yilia/source/fonts/icomoon.woff","hash":"a5c2eb785800a3a0aeaf2284d191d69df1893d6d","modified":1479709250000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1479709250000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1479709250000},{"_id":"themes/yilia/source-src/css/archive-inner.scss","hash":"5d523ae75defca35cdbb7e2d915bc51d97e3ac7d","modified":1479709250000},{"_id":"themes/yilia/source/main.js","hash":"861d5258a856d2099885b7e351824a4f94992d2f","modified":1479709250000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"8a0ae8ee6af8df3f215f1cd4ecc10145a5b92cf0","modified":1479709250000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"75f07aa38b0e56c7279c96d4d1a5061c3ba97a96","modified":1479709250000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"ed5940f0881e36a75235ff8fbd024c8ee7b3cd46","modified":1479709250000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"58c055d54cf1c9551c8b71e9d8cbe1715593bebb","modified":1479709250000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"1af257c2de4a13464196e875fe18fefe7d2d4cd9","modified":1479709250000},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"7d2e6d6ce87732fe5b3799a6e9e1f737a79ed736","modified":1479709250000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"1c79e1cd8b00d6d89cca00c2a101e6639c378a9b","modified":1479709250000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1479709250000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"b8629b441b7bb1b1f4dcaeaf77df0dae5d101dad","modified":1479709250000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1479709250000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"0267e2febaef284cf319235435643232fdeee0c9","modified":1479709250000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"bdd600d274233c001a0fb89f7f89af66bb04a147","modified":1479709250000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"facd3d41bc9b2d2c6134fc0fbd379a3b0c18476b","modified":1479709250000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0940b74a29101c97573efd8e492ee39cef5e2dc8","modified":1479709250000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"e5e55e5ffe23b4e8caba38b7cb887c73f6802fd4","modified":1479709250000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1479709250000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"ccb2c214d2c0efae41066fa85afb4d7288e55cbf","modified":1479709250000},{"_id":"themes/yilia/source-src/css/switch.scss","hash":"a4c1872aff9509441f4d723801a9b3f7db161a41","modified":1479709250000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1479709250000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1479709250000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"eed50d74e5f272af5dc5f7f335ded2c95bb5359f","modified":1479709250000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"86108d02e99a9c9fb3a8d8a9ac29599a8eeebde2","modified":1479709250000},{"_id":"themes/yilia/source-src/js/archive-inner.js","hash":"07f0124f9c2c677178ee4365a72dc1f07da931dd","modified":1479709250000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"bb2e9a1ddcb34372e6cbdd9e9ecfd3dc87623451","modified":1479709250000},{"_id":"themes/yilia/source-src/js/fix-page.js","hash":"940b580d6243461788c28bdd09b8049642a90e13","modified":1479709250000},{"_id":"themes/yilia/source-src/js/jquery.lazyload.js","hash":"2258765aa8b606cc095900daedf2666c46383de8","modified":1479709250000},{"_id":"themes/yilia/source-src/js/main.js","hash":"ce0756a8fcfc5e16faca672d3c94d62a4f4e63b5","modified":1479709250000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"d5abbdaf16fd4c8ee9ee802cfd4b6aeb34073893","modified":1479709250000},{"_id":"themes/yilia/source-src/js/tags.js","hash":"a8da9d6e3031c960f9859ef519233ad3ab65d0ef","modified":1479709250000},{"_id":"themes/yilia/source-src/js/tools.js","hash":"eb36f563b76e9431dc109856a78383ed11763a84","modified":1479709250000},{"_id":"themes/yilia/source-src/js/util.js","hash":"cf91a9c9c973e2ee05d50a24a11c411c36264238","modified":1479709250000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"8f545a5959ff5568969a46884fa0c164d008767b","modified":1479709250000},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe-ui-default.js","hash":"05fa305ec449deb59b04e2ae118a8e3ec5250e1b","modified":1479709250000},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe-ui-default.min.js","hash":"852a1fcdaacf66754090fc6d432013c5c657ab80","modified":1479709250000},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe.min.js","hash":"39806b9989eaecbc3e032da8de77f69e0c9ff779","modified":1479709250000},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe.scss","hash":"b80bb4efe9ac36a566f037fb6984af8b486a9d5c","modified":1479709250000},{"_id":"themes/yilia/source-src/photoSwipe/photoswipe.js","hash":"b616337e586eaa5afcf5bb77c927bd1b09a25524","modified":1479709250000},{"_id":"themes/yilia/.git/objects/pack/pack-d9c0965e81b9e20d8d309624d0d9e6bc895fc364.idx","hash":"5ed7a13079c74e82937543ea4f612eed4ad0c333","modified":1479709250000},{"_id":"themes/yilia/.git/refs/heads/master","hash":"7d29517ca5afc54a26c7377b089279838f73665d","modified":1479709250000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"2fd6338379fd50ea8282f065ffadc838f94e6015","modified":1479709250000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"d5c0e472dd9e8b036f977745ff50056813f6b1b0","modified":1479709250000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1479709250000},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","hash":"5b3583114f45a3f8017a6ff900d1b72ddea2a6df","modified":1479709250000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1479709250000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"e6edf173da77fb851fc067a481a897ad934cc4ca","modified":1479709250000},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","hash":"f6204220060a2b77a609fcaaa81f639d0b02e3af","modified":1479709250000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1479709250000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"8381a373d85daee53cc3247467ffa4db58ae1b88","modified":1479709250000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1479709250000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1479709250000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1479709250000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"4d2d5331a206768681add5e779789c58e9835f94","modified":1479709250000},{"_id":"themes/yilia/source-src/css/fonts/icomoon.eot","hash":"9a661069e1255d10032926a8ef87502f445f4e20","modified":1479709250000},{"_id":"themes/yilia/source-src/css/fonts/icomoon.ttf","hash":"9f1e824fc076dbfedf186609a2664558d5e3e986","modified":1479709250000},{"_id":"themes/yilia/source-src/css/fonts/icomoon.svg","hash":"2f9c8a34e40173ab8b6e3f0f761ece4d2b7a8f68","modified":1479709250000},{"_id":"themes/yilia/source-src/css/fonts/icomoon.woff","hash":"a5c2eb785800a3a0aeaf2284d191d69df1893d6d","modified":1479709250000},{"_id":"themes/yilia/source-src/css/img/black-scales.png","hash":"243ea748d016704922ccfc0b6c18d97472c27bff","modified":1479709250000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1479709250000},{"_id":"themes/yilia/source-src/css/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1479709250000},{"_id":"themes/yilia/source-src/css/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1479709250000},{"_id":"themes/yilia/source-src/css/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1479709250000},{"_id":"themes/yilia/source-src/css/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1479709250000},{"_id":"themes/yilia/source-src/css/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1479709250000},{"_id":"themes/yilia/source-src/css/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1479709250000},{"_id":"themes/yilia/source-src/css/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1479709250000},{"_id":"themes/yilia/source-src/css/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1479709250000},{"_id":"themes/yilia/source-src/css/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1479709250000},{"_id":"themes/yilia/source-src/css/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1479709250000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1479709250000},{"_id":"themes/yilia/source-src/css/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1479709250000},{"_id":"themes/yilia/source-src/css/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1479709250000},{"_id":"themes/yilia/source-src/css/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1479709250000},{"_id":"themes/yilia/source-src/css/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1479709250000},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1479709250000},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/default-skin.scss","hash":"3f8f8062d24cce2158d3c02bdfc56c000f1a1f9b","modified":1479709250000},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1479709250000},{"_id":"themes/yilia/source-src/photoSwipe/default-skin/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1479709250000},{"_id":"themes/yilia/source-src/css/img/black-paper.png","hash":"a180d3109a5cb6b9b9aa60d81730446ebe275473","modified":1479709250000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"a468a4604c53a5b105fb718e198d0bbfe09d2e3e","modified":1479709250000},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1479709250000},{"_id":"themes/yilia/source-src/js/jquery.js","hash":"aa6ccf721c4e76921abda46c120772d364e5b285","modified":1479709250000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"a468a4604c53a5b105fb718e198d0bbfe09d2e3e","modified":1479709250000},{"_id":"themes/yilia/.git/objects/pack/pack-d9c0965e81b9e20d8d309624d0d9e6bc895fc364.pack","hash":"2f802029d386d8c9d7473107cece069112d77dea","modified":1479709250000},{"_id":"public/2018/04/25/Hello/index.html","hash":"c1fcf70f927089a353bb2481cfd68374b80b80b1","modified":1524640970198},{"_id":"public/2016/11/21/android-tips/index.html","hash":"961bd5fcb6cb00050b61229ed295975e3087c0d2","modified":1524640970209},{"_id":"public/archives/index.html","hash":"079c3ea87a8be7ea81a91e343058bc323e70cb57","modified":1524640970210},{"_id":"public/archives/page/2/index.html","hash":"d0ac300966709351b273e29289d85380e646725d","modified":1524640970210},{"_id":"public/archives/2016/index.html","hash":"a9599f12624399469d565050dc3e830308ea1ad4","modified":1524640970210},{"_id":"public/archives/2016/11/index.html","hash":"062df193517f76a9f6856266c6af4b6e4e19caad","modified":1524640970210},{"_id":"public/archives/2018/index.html","hash":"3fc1a9a87585f6ef5696aa86288ec5d808a58f8d","modified":1524640970210},{"_id":"public/archives/2018/04/index.html","hash":"af3d10cefafe7aafb4051f48ddcc091eaddcfb4e","modified":1524640970210},{"_id":"public/page/2/index.html","hash":"86e0975745d4b59664dac5dda45c65cfb0df38fd","modified":1524640970210},{"_id":"public/tags/Android/index.html","hash":"17c2baba52fcc5a0527e5e0bfd9d4fb81bcbced9","modified":1524640970210},{"_id":"public/tags/tips/index.html","hash":"0ca4476ed62269ec77beaec943d41b457a64d9e0","modified":1524640970210},{"_id":"public/tags/hexo/index.html","hash":"04824e8e610bb33c29b99b32e21ae9523166d547","modified":1524640970210},{"_id":"public/tags/bolg/index.html","hash":"4da42ba2d703abf36a05727e32e69b65e8ba6e79","modified":1524640970210},{"_id":"public/tags/随记/index.html","hash":"48432e4a98afeabf036e3cd429e808c60dfca69f","modified":1524640970210},{"_id":"public/tags/sql/index.html","hash":"1394dac936f65d7072fa101cd6669828e20e9d24","modified":1524640970210},{"_id":"public/tags/SQLite/index.html","hash":"5a729df9b70b4648664b822d987777c753b3f96f","modified":1524640970211},{"_id":"public/tags/数据库/index.html","hash":"f655b73243c54ada8d91b0d19f74fa3a848fd105","modified":1524640970211},{"_id":"public/tags/stetho/index.html","hash":"361d3734242fcc4fe594b9ce72fe96822579e1c1","modified":1524640970211},{"_id":"public/tags/git/index.html","hash":"a8b9a9b23388cb9b9bdd869e6167ef1e400c0b3d","modified":1524640970211},{"_id":"public/tags/xposed/index.html","hash":"d240ad89600d1a8df42cbc8ef2c483df7bd9d37f","modified":1524640970211},{"_id":"public/tags/xposed模块/index.html","hash":"50dbb18810c20578182cb2227e773ec4248cc237","modified":1524640970211},{"_id":"public/tags/hook/index.html","hash":"28bf80fbf7d217a98c28f9cd5b635327aca8c48f","modified":1524640970211},{"_id":"public/2018/04/25/git/index.html","hash":"0bcd6cb22e6fb9a6fd903d0c8afa67f3829b5eca","modified":1524640970211},{"_id":"public/2016/11/22/memory leak/index.html","hash":"2991aee867d12f24002c6f604c576ceec8729e49","modified":1524640970211},{"_id":"public/2016/11/21/SQLite/index.html","hash":"4fe3a5277926f402034abc936b0544c793ebb3fc","modified":1524640970211},{"_id":"public/2016/11/21/xposed/index.html","hash":"cf0b49c6e7d518dd7d2931de80fbde0f626c915b","modified":1524640970211},{"_id":"public/index.html","hash":"0b82780dae5e047c3db0b9a880c36c17edd086b5","modified":1524640970211},{"_id":"public/2018/04/25/AppVeyor test/index.html","hash":"374bbf58f7b33fe937c8ea981c32aa0f8fe31adb","modified":1524640970213},{"_id":"public/tags/CI/index.html","hash":"2cad2a0bde555401d3f9ebf34ab10a19504c90af","modified":1524640970213},{"_id":"public/uploads/images/avatar.jpg","hash":"3de0c9025fa014187ee21ed72b756589584b9050","modified":1524640970215},{"_id":"public/fonts/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1524640970215},{"_id":"public/fonts/icomoon.eot","hash":"9a661069e1255d10032926a8ef87502f445f4e20","modified":1524640970215},{"_id":"public/fonts/icomoon.ttf","hash":"9f1e824fc076dbfedf186609a2664558d5e3e986","modified":1524640970215},{"_id":"public/fonts/icomoon.woff","hash":"a5c2eb785800a3a0aeaf2284d191d69df1893d6d","modified":1524640970215},{"_id":"public/fonts/icomoon.svg","hash":"2f9c8a34e40173ab8b6e3f0f761ece4d2b7a8f68","modified":1524640970215},{"_id":"public/main.css","hash":"4b06fabc1363734247fe781a77bb12b5a3bc405e","modified":1524640970221},{"_id":"public/main.js","hash":"cb6fcc6af3bd413635e09f7dd55d9b9c9a6eee78","modified":1524640970221}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"android-tips","date":"2018-04-25T07:16:00.000Z","_content":"\n使用AppVeyor CI自动部署hexo","source":"_posts/AppVeyor test.md","raw":"---\ntitle: android-tips\ndate: 2018-04-25 15:16:00\ntags: [CI]\n---\n\n使用AppVeyor CI自动部署hexo","slug":"AppVeyor test","published":1,"updated":"2018-04-25T07:17:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgerv96i0000ht9onvgzulqx","content":"<p>使用AppVeyor CI自动部署hexo</p>\n","excerpt":"","more":"<p>使用AppVeyor CI自动部署hexo</p>\n"},{"title":"android-tips","date":"2016-11-21T08:56:55.000Z","_content":"\n这里收集了大家常用的一些Android小技巧代码,内容来自自己和自己所遇到的坑。\n\n- Resources.getSystem().getDisplayMetrics().density 可以不用 Context 也能**获取屏幕密度**哦\n- 通过重载 ViewGroup 的 dispatchDraw 可以实现一个简单的**蒙版效果**。 例如下拉刷新时，可以在 contentView 上加一层遮罩。 canvas.drawRect(0, mContentView.getTranslationY(), getWidth(), getHeight(), mMaskPaint);\n- 使用 GridView时 android:padding 和 **android:clipToPadding=\"false\" **配合使用效果更好哦。\n- **DateUtils**系统提供了关于时间操作的类\n-  TypedValue.applyDimension() 系统提供的**单位转换**Api\n-  使用LocalBroadcastManager发送**广播**替代全局广播","source":"_posts/android-tips.md","raw":"---\ntitle: android-tips\ndate: 2016-11-21 16:56:55\ntags: [Android,tips]\n---\n\n这里收集了大家常用的一些Android小技巧代码,内容来自自己和自己所遇到的坑。\n\n- Resources.getSystem().getDisplayMetrics().density 可以不用 Context 也能**获取屏幕密度**哦\n- 通过重载 ViewGroup 的 dispatchDraw 可以实现一个简单的**蒙版效果**。 例如下拉刷新时，可以在 contentView 上加一层遮罩。 canvas.drawRect(0, mContentView.getTranslationY(), getWidth(), getHeight(), mMaskPaint);\n- 使用 GridView时 android:padding 和 **android:clipToPadding=\"false\" **配合使用效果更好哦。\n- **DateUtils**系统提供了关于时间操作的类\n-  TypedValue.applyDimension() 系统提供的**单位转换**Api\n-  使用LocalBroadcastManager发送**广播**替代全局广播","slug":"android-tips","published":1,"updated":"2016-11-21T09:14:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgerv96m0001ht9o334xtkt1","content":"<p>这里收集了大家常用的一些Android小技巧代码,内容来自自己和自己所遇到的坑。</p>\n<ul>\n<li>Resources.getSystem().getDisplayMetrics().density 可以不用 Context 也能<strong>获取屏幕密度</strong>哦</li>\n<li>通过重载 ViewGroup 的 dispatchDraw 可以实现一个简单的<strong>蒙版效果</strong>。 例如下拉刷新时，可以在 contentView 上加一层遮罩。 canvas.drawRect(0, mContentView.getTranslationY(), getWidth(), getHeight(), mMaskPaint);</li>\n<li>使用 GridView时 android:padding 和 <strong>android:clipToPadding=”false” </strong>配合使用效果更好哦。</li>\n<li><strong>DateUtils</strong>系统提供了关于时间操作的类</li>\n<li>TypedValue.applyDimension() 系统提供的<strong>单位转换</strong>Api</li>\n<li>使用LocalBroadcastManager发送<strong>广播</strong>替代全局广播</li>\n</ul>\n","excerpt":"","more":"<p>这里收集了大家常用的一些Android小技巧代码,内容来自自己和自己所遇到的坑。</p>\n<ul>\n<li>Resources.getSystem().getDisplayMetrics().density 可以不用 Context 也能<strong>获取屏幕密度</strong>哦</li>\n<li>通过重载 ViewGroup 的 dispatchDraw 可以实现一个简单的<strong>蒙版效果</strong>。 例如下拉刷新时，可以在 contentView 上加一层遮罩。 canvas.drawRect(0, mContentView.getTranslationY(), getWidth(), getHeight(), mMaskPaint);</li>\n<li>使用 GridView时 android:padding 和 <strong>android:clipToPadding=”false” </strong>配合使用效果更好哦。</li>\n<li><strong>DateUtils</strong>系统提供了关于时间操作的类</li>\n<li>TypedValue.applyDimension() 系统提供的<strong>单位转换</strong>Api</li>\n<li>使用LocalBroadcastManager发送<strong>广播</strong>替代全局广播</li>\n</ul>\n"},{"title":"Hello","_content":"感谢[Litten](http://litten.me/)大神的主题和提供的帮助，感谢[陆家豪](http://chiahaolu.github.io/)小伙伴的帮助，这个博客也终于弄好了。\n\n个人非常喜欢 **Yilia**这个主题的风格。之前都没有用**Markdown**写过博客，感觉语法不熟悉，写起来可能太麻烦，身为一个码农怎么能怕麻烦呢。于是就开始用学习写了，感觉挺好的。\n\n最近觉得**简书**上的文章还不错，每天都回去上边看看，感谢很舒服。每天都有些文章触动到自己\n\n后面就会慢慢的把自己以前写的，摘抄的笔记给搬过来。感觉自己有点懒 ，不过我努力的，现在开始学习一些后台的知识，感觉自己只会Android，会的东西太少了，能够做的事也太有限了，得多学习新的东西。\n\n最后感谢各位大神的开源。\n\n\n","source":"_posts/Hello.md","raw":"---\ntitle: Hello   \ntags: [hexo,bolg,随记]\n---\n感谢[Litten](http://litten.me/)大神的主题和提供的帮助，感谢[陆家豪](http://chiahaolu.github.io/)小伙伴的帮助，这个博客也终于弄好了。\n\n个人非常喜欢 **Yilia**这个主题的风格。之前都没有用**Markdown**写过博客，感觉语法不熟悉，写起来可能太麻烦，身为一个码农怎么能怕麻烦呢。于是就开始用学习写了，感觉挺好的。\n\n最近觉得**简书**上的文章还不错，每天都回去上边看看，感谢很舒服。每天都有些文章触动到自己\n\n后面就会慢慢的把自己以前写的，摘抄的笔记给搬过来。感觉自己有点懒 ，不过我努力的，现在开始学习一些后台的知识，感觉自己只会Android，会的东西太少了，能够做的事也太有限了，得多学习新的东西。\n\n最后感谢各位大神的开源。\n\n\n","slug":"Hello","published":1,"date":"2018-04-25T00:50:28.000Z","updated":"2016-11-21T08:46:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgerv96p0003ht9orh7sglcv","content":"<p>感谢<a href=\"http://litten.me/\" target=\"_blank\" rel=\"external\">Litten</a>大神的主题和提供的帮助，感谢<a href=\"http://chiahaolu.github.io/\" target=\"_blank\" rel=\"external\">陆家豪</a>小伙伴的帮助，这个博客也终于弄好了。</p>\n<p>个人非常喜欢 <strong>Yilia</strong>这个主题的风格。之前都没有用<strong>Markdown</strong>写过博客，感觉语法不熟悉，写起来可能太麻烦，身为一个码农怎么能怕麻烦呢。于是就开始用学习写了，感觉挺好的。</p>\n<p>最近觉得<strong>简书</strong>上的文章还不错，每天都回去上边看看，感谢很舒服。每天都有些文章触动到自己</p>\n<p>后面就会慢慢的把自己以前写的，摘抄的笔记给搬过来。感觉自己有点懒 ，不过我努力的，现在开始学习一些后台的知识，感觉自己只会Android，会的东西太少了，能够做的事也太有限了，得多学习新的东西。</p>\n<p>最后感谢各位大神的开源。</p>\n","excerpt":"","more":"<p>感谢<a href=\"http://litten.me/\">Litten</a>大神的主题和提供的帮助，感谢<a href=\"http://chiahaolu.github.io/\">陆家豪</a>小伙伴的帮助，这个博客也终于弄好了。</p>\n<p>个人非常喜欢 <strong>Yilia</strong>这个主题的风格。之前都没有用<strong>Markdown</strong>写过博客，感觉语法不熟悉，写起来可能太麻烦，身为一个码农怎么能怕麻烦呢。于是就开始用学习写了，感觉挺好的。</p>\n<p>最近觉得<strong>简书</strong>上的文章还不错，每天都回去上边看看，感谢很舒服。每天都有些文章触动到自己</p>\n<p>后面就会慢慢的把自己以前写的，摘抄的笔记给搬过来。感觉自己有点懒 ，不过我努力的，现在开始学习一些后台的知识，感觉自己只会Android，会的东西太少了，能够做的事也太有限了，得多学习新的东西。</p>\n<p>最后感谢各位大神的开源。</p>\n"},{"title":"SQLite","date":"2016-11-21T09:55:15.000Z","_content":"Android上的自带数据库SQLite操作，虽然`GreenDao`和`ORMLite`都挺厉害的，封装的也都挺好的。不过本篇文章不是介绍这两个开源库，简单介绍了下Android原生数据库的操作\n\n### 数据库基本操作\n\n##### 1.首先创建数据库类 SQLiteOpenHelper\n<font size=\"3\" color=\"green\">就直接上代码吧</font>\n\n<!--more-->\n\n``` java\npublic class PermissionHelper extends SQLiteOpenHelper {\n    /**\n     * 数据库名\n     */\n    public static final String DB_NAME = \"privacymanager.db\";\n    /**\n    数据库版本\n    */\n    public static final int DB_VERSION = 1;\n    /**\n    * 表名\n    */\n    public static final String TABLE_PERMISSION = \"Permission\";\n    public static final String permissionName = \"permissionName\";\n    public static final String permissionCName = \"permissionCName\";\n    /**\n     * 应用权限表\n     */\n    public static final String TABLE_APP_PERMISSION = \"AppPermission\";\n    public static final String id = \"id\";\n    public static final String appUid = \"uid\";\n    public static final String permission = \"permission\";\n \n    /**\n     * 创建表sql语句\n     */\n    private static final String SQL_CREATE_TABLE_PERMISSION = \"CREATE TABLE \" + TABLE_PERMISSION + \"(\" + //\n            id + \" INTEGER PRIMARY KEY AUTOINCREMENT, \" +//\n            permissionCName + \" VARCHAR, \" +//\n            permissionName + \" VARCHAR)\";\n    private static final String SQL_CREATE_TABLE_APP_PERMISSION = \"CREATE TABLE \" + TABLE_APP_PERMISSION + \"(\" + //\n            id + \" INTEGER PRIMARY KEY AUTOINCREMENT, \" +//\n            appUid + \" VARCHAR, \" +//\n            permission + \" VARCHAR)\";\n  \n \n    public PermissionHelper(Context context) {\n        /**\n         * 必须有构造方法，参数分别是 上下文、数据库名字、游标工厂（一般null为默认）、数据库版本（数据库的版本必须大于0，否则报错）\n         */\n        super(context, DB_NAME, null, DB_VERSION);\n    }\n \n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        /**\n         * 主动开启事务执行sql， 没有开启事务，系统会默认每执行一句sql语句就会开启事务\n         * 在第一次打开数据库的时候才会走\n         * 在清除数据之后再次运行-->打开数据库，这个方法会走\n         * 没有清除数据，不会走这个方法\n         * 数据库升级的时候这个方法不会走\n         *\n         */\n        db.beginTransaction();\n        try {\n            db.execSQL(SQL_CREATE_TABLE_PERMISSION);\n            db.execSQL(SQL_CREATE_TABLE_APP_PERMISSION);\n            db.setTransactionSuccessful();\n        } finally {\n            db.endTransaction();\n        }\n \n \n    }\n \n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        /**\n         * 数据库更新操作\n         */\n//        if (newVersion != oldVersion) {\n//            db.beginTransaction();\n//            try {\n//                db.execSQL(SQL_DELETE_TABLE_APP_PERMISSION);\n//                db.execSQL(SQL_DELETE_TABLE_PERMISSION);\n//                db.execSQL(SQL_CREATE_TABLE_APP_PERMISSION);\n//                db.execSQL(SQL_CREATE_TABLE_PERMISSION);\n//                db.setTransactionSuccessful();\n//            } finally {\n//                db.endTransaction();\n//            }\n//        }\n    }\n \n    @Override\n    public void onDowngrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        /**\n         * 降级操作\n         */\n        onUpgrade(db, oldVersion, newVersion);\n    }\n}\n```\n##### 2.一般可以创建Manager去管理数据库的操作（设计比较简单 ，这里没有对数据库加锁操作）\n<font size=\"3\" color=\"green\">还是用代码说明吧</font>\n\n``` java\npublic class PermissionDBManager {\n    private Context mContext;\n    private PermissionHelper mPermissionHelper;\n    public PermissionDBManager(Context context) {\n        this.mContext = context;\n        mPermissionHelper = new PermissionHelper(context);\n    }\n    /**\n     * 数据库插入方法\n     * @param uid\n     * @param permission\n     */\n    public void add(String uid, String permission) {\n        SQLiteDatabase db = null;\n        try {\n            db = mPermissionHelper.getWritableDatabase();\n            ContentValues values = new ContentValues();\n            values.put(PermissionHelper.appUid, uid);\n            values.put(PermissionHelper.permission, permission);\n            db.insert(PermissionHelper.TABLE_APP_PERMISSION, null, values);\n        } catch (Exception e) {\n            // TODO: handle exception\n        } finally {\n            if (db != null) {\n                db.close();\n            }\n        }\n    }\n    /**\n     * 根据uid 查询所有的权限\n     *\n     * @param uid\n     * @return\n     */\n    public List<String> searchPermission(String uid) {\n        List<String> list = new ArrayList<>();\n        SQLiteDatabase db = null;\n        Cursor cursor = null;\n        try {\n            db = mPermissionHelper.getReadableDatabase();\n            cursor = db.query(PermissionHelper.TABLE_APP_PERMISSION, null, PermissionHelper.appUid + \"=?\", new String[]{uid}, null, null, null);\n            while (cursor.moveToNext()) {\n                String permission = cursor.getString(cursor.getColumnIndex(PermissionHelper.permission));\n                list.add(permission);\n            }\n        } catch (Exception e) {\n            // TODO: handle exception\n        } finally {\n            cursor.close();\n            db.close();\n        }\n        return list;\n    }\n    /**\n     * 根据权限查询所有uid\n     *\n     * @param permission\n     * @return\n     */\n    public List<String> searchUid(String permission) {\n        List<String> list = new ArrayList<>();\n        SQLiteDatabase db = null;\n        Cursor cursor = null;\n        try {\n            db = mPermissionHelper.getReadableDatabase();\n            cursor = db.query(PermissionHelper.TABLE_APP_PERMISSION, null, PermissionHelper.permission + \"=?\", new String[]{permission}, null, null, null);\n            while (cursor.moveToNext()) {\n                String uid = cursor.getString(cursor.getColumnIndex(PermissionHelper.appUid));\n                list.add(uid);\n            }\n        } catch (Exception e) {\n            // TODO: handle exception\n        } finally {\n            cursor.close();\n            db.close();\n        }\n        return list;\n    }\n    public void delete(String permission, String uid) {\n        SQLiteDatabase db = null;\n        try {\n            db = mPermissionHelper.getWritableDatabase();\n            String whereClause = \"uid=? and permission =?\";\n            db.delete(PermissionHelper.TABLE_APP_PERMISSION, whereClause, new String[]{uid, permission});\n        } catch (Exception e) {\n            // TODO: handle exception\n        } finally {\n            if (db != null) {\n                db.close();\n            }\n        }\n    }\n    /**\n     * 批量插入方法\n     * @param map\n     */\n    public void addCPermission(Map<String, String> map) {\n        SQLiteDatabase db = null;\n        try {\n            db = mPermissionHelper.getWritableDatabase();\n            String sql = \"insert into\" + PermissionHelper.TABLE_PERMISSION + \"(permissionName,permissionCName) values(?,?)\";\n            SQLiteStatement stat = db.compileStatement(sql);\n            db.beginTransaction();\n            for (Map.Entry<String, String> mEntry : map.entrySet()) {\n                //循环所要插入的数据\n                stat.bindString(1, mEntry.getKey());\n                stat.bindString(2, mEntry.getValue());\n                stat.executeInsert();\n            }\n            db.setTransactionSuccessful();\n            db.endTransaction();\n        } catch (Exception e) {\n            // TODO: handle exception\n        } finally {\n            if (db != null) {\n                db.close();\n            }\n        }\n    }\n }\n```\n 以上，即可一个简单的数据库操作，写的比较简单\n### 数据库更新策略\n\n我们知道在SQLiteOpenHelper的构造方法:\n``` java\nsuper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version)\n```\n<font color=\"blue\">中最后一个参数表示数据库的版本号.当新的版本号大于当前的version时会调用方法onUpgrade。</font>\n``` java\n@Override\nonUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)\n```\n所以我们的重点是在该方法中实现***SQLite数据库版本升级***的管理,当我们项目刚开始的时候第一版SQLiteOpenHelper是这样写的:\n``` java\n/**\n * SQLite数据库版本升级的管理实现\n */\npublic class DataBaseOpenHelper extends SQLiteOpenHelper {\n/**\n * 数据库名\n */\n  private final static String DATABASE_NAME=\"test.db\";\n  private static DataBaseOpenHelper mDataBaseOpenHelper;\n  //创建person表\n  public static final String CREATE_PERSON=\n  \"create table person(personid integer primary key autoincrement,name varchar(20),phone VARCHAR(12))\";\n  \n  public DataBaseOpenHelper(Context context,String name,CursorFactory factory,int version) {\n    super(context, name, factory, version);\n  }\n  //注意:\n  //将DataBaseOpenHelper写成单例的.\n  //否则当在一个for循环中频繁调用openHelper.getWritableDatabase()时\n  //会报错,提示数据库没有执行关闭操作\n  static synchronized DataBaseOpenHelper getDBInstance(Context context) {\n    if (mDataBaseOpenHelper == null) {\n      mDataBaseOpenHelper = new DataBaseOpenHelper(context,DATABASE_NAME,null,1);\n    }\n    return mDataBaseOpenHelper;\n  } \n  @Override\n  public void onCreate(SQLiteDatabase db) {\n    db.execSQL(CREATE_PERSON);\n  }\n  @Override\n  public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n  }\n} \n```\n\n\n在几天之后根据项目需求，<font color=\"red\">需要添加一张student表，于是DataBaseOpenHelper就出现了第二版:</font>\n\n``` java\npublic class DataBaseOpenHelper extends SQLiteOpenHelper {\n//数据库名\n  private final static String DATABASE_NAME=\"test.db\";\n  private static DataBaseOpenHelper mDataBaseOpenHelper;\n  //创建person表\n  public static final String CREATE_PERSON=\n  \"create table person(personid integer primary key autoincrement,name varchar(20),phone VARCHAR(12))\";\n  //创建student表\n  public static final String CREATE_STUDENT=\n  \"create table student(studentid integer primary key autoincrement,name varchar(20),phone VARCHAR(12))\";\n\n  public DataBaseOpenHelper(Context context,String name,CursorFactory factory,int version) {\n    super(context, name, factory, version);\n  }\n  //注意:\n  //将DataBaseOpenHelper写成单例的.\n  //否则当在一个for循环中频繁调用openHelper.getWritableDatabase()时\n  //会报错,提示数据库没有执行关闭操作\n  static synchronized DataBaseOpenHelper getDBInstance(Context context) {\n    if (mDataBaseOpenHelper == null) {\n     /*\n      * TODO: 改动1 更改数据版本\n      */\n      mDataBaseOpenHelper = new DataBaseOpenHelper(context,DATABASE_NAME,null,2);\n    }\n    return mDataBaseOpenHelper;\n  } \n  @Override\n  public void onCreate(SQLiteDatabase db) {\n    db.execSQL(CREATE_PERSON);\n    /*\n     * TODO:改动2   老版本  直接创建2张表\n     */\n    db.execSQL(CREATE_STUDENT);\n  }\n  @Override\n  public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n    //改动3 根据版本执行不同的sql\n    switch (oldVersion) {\n    case 1: //版本1 直接创建新表\n    db.execSQL(CREATE_STUDENT);\n    default:\n    }\n  }\n}\n```\n较版本一在版本二中有**三处修改**的地方:\n- **版本号变成了2:**\n- **在onCreate()方法中添加了代码db.execSQL(CREATE_STUDENT);创建student表**\n\n<font color=blue>因为有的用户根本就没有第一版本的APP，直接从市场下载了第二版本的App。所以当然会执行onCreate()而不会执行onUpgrade()</font>\n\n- **在onUpgrade()做了处理：当oldVersion为1时调用db.execSQL(CREATE_STUDENT);创建student表**\n\n\n\n\n<font color=blue>因为有的用户手机上本来就有第一版本的APP，所以在App升级到第二版本时会执行onUpgrade()，不会执行onCreate()</font>\n\n通过这样的处理使得不同的情况下使用第二版APP时都会生成student表。\n<font color=red>又过了一个月，根据项目变更，需要给person表添加一个字段genderid，于是DataBaseOpenHelper就出现了第三版:</font>\n\n``` java\npublic class DataBaseOpenHelper extends SQLiteOpenHelper {\n    //数据库名\n  private final static String DATABASE_NAME=\"test.db\";\n  private static DataBaseOpenHelper mDataBaseOpenHelper;\n  //改动1  更改sql语句\n  public static final String CREATE_PERSON=\n  \"create table person(personid integer primary key autoincrement,name varchar(20),phone VARCHAR(12)),genderid integer)\";\n  //新增sql  用于增加列  \n  //详细sql请见 http://blog.leanote.com/post/cornflower1991@163.com/%E4%B8%AA%E4%BA%BA%E4%B8%8D%E5%B8%B8%E7%94%A8%E7%9A%84-sql%E8%AF%AD%E5%8F%A5\n  public static final String ALTER_PERSON=\"alter table person add column genderid integer\";\n  \n  \n  public static final String CREATE_STUDENT=\n  \"create table student(studentid integer primary key autoincrement,name varchar(20),phone VARCHAR(12))\";\n  \n  public DataBaseOpenHelper(Context context,String name,CursorFactory factory,int version) {\n    super(context, name, factory, version);\n  }\n  //注意:\n  //将DataBaseOpenHelper写成单例的.\n  //否则当在一个for循环中频繁调用openHelper.getWritableDatabase()时\n  //会报错,提示数据库没有执行关闭操作\n  static synchronized DataBaseOpenHelper getDBInstance(Context context) {\n    if (mDataBaseOpenHelper == null) {\n      //改动2 版本更改\n      mDataBaseOpenHelper = new DataBaseOpenHelper(context,DATABASE_NAME,null,3);\n    }\n    return mDataBaseOpenHelper;\n  } \n  @Override\n  public void onCreate(SQLiteDatabase db) {\n    db.execSQL(CREATE_PERSON);\n    db.execSQL(CREATE_STUDENT);\n  }\n  @Override\n  public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n    switch (oldVersion) {\n    case 1:\n    db.execSQL(CREATE_STUDENT);\n    //改动3\n    case 2:\n    db.execSQL(ALTER_PERSON);\n    default:\n    }\n  }\n}\n```\n\n较版本二在版本三中有**三处修改**的地方：\n\n- **改变了CREATE_PERSON语句，在改语句中增加了一个字段genderid**\n\n和前面的描述类似，有的用户第一次安装该APP时就直接下载了第三版执行Oncreate()。\n\n- **修改版本号为3 应对了用户从第一版本或者第二版本升级到第三版本的情况(见下分析)**\n\n- **在onUpgrade()方法中)做了处理：当oldVersion为2时调用 db.execSQL(ALTER_PERSON);修改person表，增加genderid字段**\n\n应对了用户从第二版本升级到第三版本的情况(见下分析)\n\n> **注意**一个问题：为什么这里的switch语句在每个case中**没有break**？？这是为了保证跨版本升级的时候**每次数据库的升级都会执行到**。\n> - 比如从**第二版升级到第三版本**，那么case 2会被执行。\n> - 比如从**第一版直接升级到第三版本**，那么case 1肯定会被调用，由于没有break所以会传透switch语句又执行case 2语句继续升级，从而保证了数据的所有版本中的升级都会被执行到。\n\n\n <font color=red> 以上就是数据库版本更新时注意的地方。</font>\n\n### 查看真机数据库\n\nAndroid手机root之后可以使用 `su root` 命令查看授权，然后进入data/data目录下。sqlite3命令打不开，可以直接执行`cp`命令复制到本地，进行查看。当然使用第三方软件如`RE管理器`等。\n这里想介绍的是`Facebook`的调试插件[stetho][1]，使用该插件你可以在`Chrome Developer Tools`查看App的布局，网络请求，sqlite，preference等。个人网络请求没怎么用过，不太会用。看数据库和sp还是很爽的，主要是不需要手机`root`。\n集成步骤：\n- 1.引入依赖包\n>   compile 'com.facebook.stetho:stetho:1.4.1' \n\n- 2.初始化一下\n```java\n public class MyApplication extends Application {\n   public void onCreate() {\n     super.onCreate();\n     Stetho.initializeWithDefaults(this);\n   }\n }\n```\n- 3.运行App, 打开Chrome输入chrome://inspect/#devices（别忘了用数据线把手机和电脑连起来哦）\n![@运行效果界面 | center](http://ogzf36bsb.bkt.clouddn.com/blog/20161122/114633563.png)\n如上图，chrome会检测到我们的app，点击`inspect`进入查看页面\n![@查看App 数据界面 | center](http://ogzf36bsb.bkt.clouddn.com/blog/20161122/114924961.png)\n数据库和sp文件都在Resources标签下，即可查看，还有网络等其他功能就不展示了，更多[高级用法][2]。\n\n\n\n\n\n [1]: https://github.com/facebook/stetho\n [2]: http://facebook.github.io/stetho/","source":"_posts/SQLite.md","raw":"---\ntitle: SQLite\ndate: 2016-11-21 17:55:15\ntags: [sql,SQLite,数据库,stetho]\n---\nAndroid上的自带数据库SQLite操作，虽然`GreenDao`和`ORMLite`都挺厉害的，封装的也都挺好的。不过本篇文章不是介绍这两个开源库，简单介绍了下Android原生数据库的操作\n\n### 数据库基本操作\n\n##### 1.首先创建数据库类 SQLiteOpenHelper\n<font size=\"3\" color=\"green\">就直接上代码吧</font>\n\n<!--more-->\n\n``` java\npublic class PermissionHelper extends SQLiteOpenHelper {\n    /**\n     * 数据库名\n     */\n    public static final String DB_NAME = \"privacymanager.db\";\n    /**\n    数据库版本\n    */\n    public static final int DB_VERSION = 1;\n    /**\n    * 表名\n    */\n    public static final String TABLE_PERMISSION = \"Permission\";\n    public static final String permissionName = \"permissionName\";\n    public static final String permissionCName = \"permissionCName\";\n    /**\n     * 应用权限表\n     */\n    public static final String TABLE_APP_PERMISSION = \"AppPermission\";\n    public static final String id = \"id\";\n    public static final String appUid = \"uid\";\n    public static final String permission = \"permission\";\n \n    /**\n     * 创建表sql语句\n     */\n    private static final String SQL_CREATE_TABLE_PERMISSION = \"CREATE TABLE \" + TABLE_PERMISSION + \"(\" + //\n            id + \" INTEGER PRIMARY KEY AUTOINCREMENT, \" +//\n            permissionCName + \" VARCHAR, \" +//\n            permissionName + \" VARCHAR)\";\n    private static final String SQL_CREATE_TABLE_APP_PERMISSION = \"CREATE TABLE \" + TABLE_APP_PERMISSION + \"(\" + //\n            id + \" INTEGER PRIMARY KEY AUTOINCREMENT, \" +//\n            appUid + \" VARCHAR, \" +//\n            permission + \" VARCHAR)\";\n  \n \n    public PermissionHelper(Context context) {\n        /**\n         * 必须有构造方法，参数分别是 上下文、数据库名字、游标工厂（一般null为默认）、数据库版本（数据库的版本必须大于0，否则报错）\n         */\n        super(context, DB_NAME, null, DB_VERSION);\n    }\n \n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        /**\n         * 主动开启事务执行sql， 没有开启事务，系统会默认每执行一句sql语句就会开启事务\n         * 在第一次打开数据库的时候才会走\n         * 在清除数据之后再次运行-->打开数据库，这个方法会走\n         * 没有清除数据，不会走这个方法\n         * 数据库升级的时候这个方法不会走\n         *\n         */\n        db.beginTransaction();\n        try {\n            db.execSQL(SQL_CREATE_TABLE_PERMISSION);\n            db.execSQL(SQL_CREATE_TABLE_APP_PERMISSION);\n            db.setTransactionSuccessful();\n        } finally {\n            db.endTransaction();\n        }\n \n \n    }\n \n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        /**\n         * 数据库更新操作\n         */\n//        if (newVersion != oldVersion) {\n//            db.beginTransaction();\n//            try {\n//                db.execSQL(SQL_DELETE_TABLE_APP_PERMISSION);\n//                db.execSQL(SQL_DELETE_TABLE_PERMISSION);\n//                db.execSQL(SQL_CREATE_TABLE_APP_PERMISSION);\n//                db.execSQL(SQL_CREATE_TABLE_PERMISSION);\n//                db.setTransactionSuccessful();\n//            } finally {\n//                db.endTransaction();\n//            }\n//        }\n    }\n \n    @Override\n    public void onDowngrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        /**\n         * 降级操作\n         */\n        onUpgrade(db, oldVersion, newVersion);\n    }\n}\n```\n##### 2.一般可以创建Manager去管理数据库的操作（设计比较简单 ，这里没有对数据库加锁操作）\n<font size=\"3\" color=\"green\">还是用代码说明吧</font>\n\n``` java\npublic class PermissionDBManager {\n    private Context mContext;\n    private PermissionHelper mPermissionHelper;\n    public PermissionDBManager(Context context) {\n        this.mContext = context;\n        mPermissionHelper = new PermissionHelper(context);\n    }\n    /**\n     * 数据库插入方法\n     * @param uid\n     * @param permission\n     */\n    public void add(String uid, String permission) {\n        SQLiteDatabase db = null;\n        try {\n            db = mPermissionHelper.getWritableDatabase();\n            ContentValues values = new ContentValues();\n            values.put(PermissionHelper.appUid, uid);\n            values.put(PermissionHelper.permission, permission);\n            db.insert(PermissionHelper.TABLE_APP_PERMISSION, null, values);\n        } catch (Exception e) {\n            // TODO: handle exception\n        } finally {\n            if (db != null) {\n                db.close();\n            }\n        }\n    }\n    /**\n     * 根据uid 查询所有的权限\n     *\n     * @param uid\n     * @return\n     */\n    public List<String> searchPermission(String uid) {\n        List<String> list = new ArrayList<>();\n        SQLiteDatabase db = null;\n        Cursor cursor = null;\n        try {\n            db = mPermissionHelper.getReadableDatabase();\n            cursor = db.query(PermissionHelper.TABLE_APP_PERMISSION, null, PermissionHelper.appUid + \"=?\", new String[]{uid}, null, null, null);\n            while (cursor.moveToNext()) {\n                String permission = cursor.getString(cursor.getColumnIndex(PermissionHelper.permission));\n                list.add(permission);\n            }\n        } catch (Exception e) {\n            // TODO: handle exception\n        } finally {\n            cursor.close();\n            db.close();\n        }\n        return list;\n    }\n    /**\n     * 根据权限查询所有uid\n     *\n     * @param permission\n     * @return\n     */\n    public List<String> searchUid(String permission) {\n        List<String> list = new ArrayList<>();\n        SQLiteDatabase db = null;\n        Cursor cursor = null;\n        try {\n            db = mPermissionHelper.getReadableDatabase();\n            cursor = db.query(PermissionHelper.TABLE_APP_PERMISSION, null, PermissionHelper.permission + \"=?\", new String[]{permission}, null, null, null);\n            while (cursor.moveToNext()) {\n                String uid = cursor.getString(cursor.getColumnIndex(PermissionHelper.appUid));\n                list.add(uid);\n            }\n        } catch (Exception e) {\n            // TODO: handle exception\n        } finally {\n            cursor.close();\n            db.close();\n        }\n        return list;\n    }\n    public void delete(String permission, String uid) {\n        SQLiteDatabase db = null;\n        try {\n            db = mPermissionHelper.getWritableDatabase();\n            String whereClause = \"uid=? and permission =?\";\n            db.delete(PermissionHelper.TABLE_APP_PERMISSION, whereClause, new String[]{uid, permission});\n        } catch (Exception e) {\n            // TODO: handle exception\n        } finally {\n            if (db != null) {\n                db.close();\n            }\n        }\n    }\n    /**\n     * 批量插入方法\n     * @param map\n     */\n    public void addCPermission(Map<String, String> map) {\n        SQLiteDatabase db = null;\n        try {\n            db = mPermissionHelper.getWritableDatabase();\n            String sql = \"insert into\" + PermissionHelper.TABLE_PERMISSION + \"(permissionName,permissionCName) values(?,?)\";\n            SQLiteStatement stat = db.compileStatement(sql);\n            db.beginTransaction();\n            for (Map.Entry<String, String> mEntry : map.entrySet()) {\n                //循环所要插入的数据\n                stat.bindString(1, mEntry.getKey());\n                stat.bindString(2, mEntry.getValue());\n                stat.executeInsert();\n            }\n            db.setTransactionSuccessful();\n            db.endTransaction();\n        } catch (Exception e) {\n            // TODO: handle exception\n        } finally {\n            if (db != null) {\n                db.close();\n            }\n        }\n    }\n }\n```\n 以上，即可一个简单的数据库操作，写的比较简单\n### 数据库更新策略\n\n我们知道在SQLiteOpenHelper的构造方法:\n``` java\nsuper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version)\n```\n<font color=\"blue\">中最后一个参数表示数据库的版本号.当新的版本号大于当前的version时会调用方法onUpgrade。</font>\n``` java\n@Override\nonUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)\n```\n所以我们的重点是在该方法中实现***SQLite数据库版本升级***的管理,当我们项目刚开始的时候第一版SQLiteOpenHelper是这样写的:\n``` java\n/**\n * SQLite数据库版本升级的管理实现\n */\npublic class DataBaseOpenHelper extends SQLiteOpenHelper {\n/**\n * 数据库名\n */\n  private final static String DATABASE_NAME=\"test.db\";\n  private static DataBaseOpenHelper mDataBaseOpenHelper;\n  //创建person表\n  public static final String CREATE_PERSON=\n  \"create table person(personid integer primary key autoincrement,name varchar(20),phone VARCHAR(12))\";\n  \n  public DataBaseOpenHelper(Context context,String name,CursorFactory factory,int version) {\n    super(context, name, factory, version);\n  }\n  //注意:\n  //将DataBaseOpenHelper写成单例的.\n  //否则当在一个for循环中频繁调用openHelper.getWritableDatabase()时\n  //会报错,提示数据库没有执行关闭操作\n  static synchronized DataBaseOpenHelper getDBInstance(Context context) {\n    if (mDataBaseOpenHelper == null) {\n      mDataBaseOpenHelper = new DataBaseOpenHelper(context,DATABASE_NAME,null,1);\n    }\n    return mDataBaseOpenHelper;\n  } \n  @Override\n  public void onCreate(SQLiteDatabase db) {\n    db.execSQL(CREATE_PERSON);\n  }\n  @Override\n  public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n  }\n} \n```\n\n\n在几天之后根据项目需求，<font color=\"red\">需要添加一张student表，于是DataBaseOpenHelper就出现了第二版:</font>\n\n``` java\npublic class DataBaseOpenHelper extends SQLiteOpenHelper {\n//数据库名\n  private final static String DATABASE_NAME=\"test.db\";\n  private static DataBaseOpenHelper mDataBaseOpenHelper;\n  //创建person表\n  public static final String CREATE_PERSON=\n  \"create table person(personid integer primary key autoincrement,name varchar(20),phone VARCHAR(12))\";\n  //创建student表\n  public static final String CREATE_STUDENT=\n  \"create table student(studentid integer primary key autoincrement,name varchar(20),phone VARCHAR(12))\";\n\n  public DataBaseOpenHelper(Context context,String name,CursorFactory factory,int version) {\n    super(context, name, factory, version);\n  }\n  //注意:\n  //将DataBaseOpenHelper写成单例的.\n  //否则当在一个for循环中频繁调用openHelper.getWritableDatabase()时\n  //会报错,提示数据库没有执行关闭操作\n  static synchronized DataBaseOpenHelper getDBInstance(Context context) {\n    if (mDataBaseOpenHelper == null) {\n     /*\n      * TODO: 改动1 更改数据版本\n      */\n      mDataBaseOpenHelper = new DataBaseOpenHelper(context,DATABASE_NAME,null,2);\n    }\n    return mDataBaseOpenHelper;\n  } \n  @Override\n  public void onCreate(SQLiteDatabase db) {\n    db.execSQL(CREATE_PERSON);\n    /*\n     * TODO:改动2   老版本  直接创建2张表\n     */\n    db.execSQL(CREATE_STUDENT);\n  }\n  @Override\n  public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n    //改动3 根据版本执行不同的sql\n    switch (oldVersion) {\n    case 1: //版本1 直接创建新表\n    db.execSQL(CREATE_STUDENT);\n    default:\n    }\n  }\n}\n```\n较版本一在版本二中有**三处修改**的地方:\n- **版本号变成了2:**\n- **在onCreate()方法中添加了代码db.execSQL(CREATE_STUDENT);创建student表**\n\n<font color=blue>因为有的用户根本就没有第一版本的APP，直接从市场下载了第二版本的App。所以当然会执行onCreate()而不会执行onUpgrade()</font>\n\n- **在onUpgrade()做了处理：当oldVersion为1时调用db.execSQL(CREATE_STUDENT);创建student表**\n\n\n\n\n<font color=blue>因为有的用户手机上本来就有第一版本的APP，所以在App升级到第二版本时会执行onUpgrade()，不会执行onCreate()</font>\n\n通过这样的处理使得不同的情况下使用第二版APP时都会生成student表。\n<font color=red>又过了一个月，根据项目变更，需要给person表添加一个字段genderid，于是DataBaseOpenHelper就出现了第三版:</font>\n\n``` java\npublic class DataBaseOpenHelper extends SQLiteOpenHelper {\n    //数据库名\n  private final static String DATABASE_NAME=\"test.db\";\n  private static DataBaseOpenHelper mDataBaseOpenHelper;\n  //改动1  更改sql语句\n  public static final String CREATE_PERSON=\n  \"create table person(personid integer primary key autoincrement,name varchar(20),phone VARCHAR(12)),genderid integer)\";\n  //新增sql  用于增加列  \n  //详细sql请见 http://blog.leanote.com/post/cornflower1991@163.com/%E4%B8%AA%E4%BA%BA%E4%B8%8D%E5%B8%B8%E7%94%A8%E7%9A%84-sql%E8%AF%AD%E5%8F%A5\n  public static final String ALTER_PERSON=\"alter table person add column genderid integer\";\n  \n  \n  public static final String CREATE_STUDENT=\n  \"create table student(studentid integer primary key autoincrement,name varchar(20),phone VARCHAR(12))\";\n  \n  public DataBaseOpenHelper(Context context,String name,CursorFactory factory,int version) {\n    super(context, name, factory, version);\n  }\n  //注意:\n  //将DataBaseOpenHelper写成单例的.\n  //否则当在一个for循环中频繁调用openHelper.getWritableDatabase()时\n  //会报错,提示数据库没有执行关闭操作\n  static synchronized DataBaseOpenHelper getDBInstance(Context context) {\n    if (mDataBaseOpenHelper == null) {\n      //改动2 版本更改\n      mDataBaseOpenHelper = new DataBaseOpenHelper(context,DATABASE_NAME,null,3);\n    }\n    return mDataBaseOpenHelper;\n  } \n  @Override\n  public void onCreate(SQLiteDatabase db) {\n    db.execSQL(CREATE_PERSON);\n    db.execSQL(CREATE_STUDENT);\n  }\n  @Override\n  public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n    switch (oldVersion) {\n    case 1:\n    db.execSQL(CREATE_STUDENT);\n    //改动3\n    case 2:\n    db.execSQL(ALTER_PERSON);\n    default:\n    }\n  }\n}\n```\n\n较版本二在版本三中有**三处修改**的地方：\n\n- **改变了CREATE_PERSON语句，在改语句中增加了一个字段genderid**\n\n和前面的描述类似，有的用户第一次安装该APP时就直接下载了第三版执行Oncreate()。\n\n- **修改版本号为3 应对了用户从第一版本或者第二版本升级到第三版本的情况(见下分析)**\n\n- **在onUpgrade()方法中)做了处理：当oldVersion为2时调用 db.execSQL(ALTER_PERSON);修改person表，增加genderid字段**\n\n应对了用户从第二版本升级到第三版本的情况(见下分析)\n\n> **注意**一个问题：为什么这里的switch语句在每个case中**没有break**？？这是为了保证跨版本升级的时候**每次数据库的升级都会执行到**。\n> - 比如从**第二版升级到第三版本**，那么case 2会被执行。\n> - 比如从**第一版直接升级到第三版本**，那么case 1肯定会被调用，由于没有break所以会传透switch语句又执行case 2语句继续升级，从而保证了数据的所有版本中的升级都会被执行到。\n\n\n <font color=red> 以上就是数据库版本更新时注意的地方。</font>\n\n### 查看真机数据库\n\nAndroid手机root之后可以使用 `su root` 命令查看授权，然后进入data/data目录下。sqlite3命令打不开，可以直接执行`cp`命令复制到本地，进行查看。当然使用第三方软件如`RE管理器`等。\n这里想介绍的是`Facebook`的调试插件[stetho][1]，使用该插件你可以在`Chrome Developer Tools`查看App的布局，网络请求，sqlite，preference等。个人网络请求没怎么用过，不太会用。看数据库和sp还是很爽的，主要是不需要手机`root`。\n集成步骤：\n- 1.引入依赖包\n>   compile 'com.facebook.stetho:stetho:1.4.1' \n\n- 2.初始化一下\n```java\n public class MyApplication extends Application {\n   public void onCreate() {\n     super.onCreate();\n     Stetho.initializeWithDefaults(this);\n   }\n }\n```\n- 3.运行App, 打开Chrome输入chrome://inspect/#devices（别忘了用数据线把手机和电脑连起来哦）\n![@运行效果界面 | center](http://ogzf36bsb.bkt.clouddn.com/blog/20161122/114633563.png)\n如上图，chrome会检测到我们的app，点击`inspect`进入查看页面\n![@查看App 数据界面 | center](http://ogzf36bsb.bkt.clouddn.com/blog/20161122/114924961.png)\n数据库和sp文件都在Resources标签下，即可查看，还有网络等其他功能就不展示了，更多[高级用法][2]。\n\n\n\n\n\n [1]: https://github.com/facebook/stetho\n [2]: http://facebook.github.io/stetho/","slug":"SQLite","published":1,"updated":"2016-11-22T07:12:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgerv96q0004ht9o3cb2e1ka","content":"<p>Android上的自带数据库SQLite操作，虽然<code>GreenDao</code>和<code>ORMLite</code>都挺厉害的，封装的也都挺好的。不过本篇文章不是介绍这两个开源库，简单介绍了下Android原生数据库的操作</p>\n<h3 id=\"数据库基本操作\"><a href=\"#数据库基本操作\" class=\"headerlink\" title=\"数据库基本操作\"></a>数据库基本操作</h3><h5 id=\"1-首先创建数据库类-SQLiteOpenHelper\"><a href=\"#1-首先创建数据库类-SQLiteOpenHelper\" class=\"headerlink\" title=\"1.首先创建数据库类 SQLiteOpenHelper\"></a>1.首先创建数据库类 SQLiteOpenHelper</h5><font size=\"3\" color=\"green\">就直接上代码吧</font>\n\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PermissionHelper</span> <span class=\"keyword\">extends</span> <span class=\"title\">SQLiteOpenHelper</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 数据库名</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DB_NAME = <span class=\"string\">\"privacymanager.db\"</span>;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">    数据库版本</div><div class=\"line\">    */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DB_VERSION = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">    * 表名</div><div class=\"line\">    */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TABLE_PERMISSION = <span class=\"string\">\"Permission\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String permissionName = <span class=\"string\">\"permissionName\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String permissionCName = <span class=\"string\">\"permissionCName\"</span>;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 应用权限表</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TABLE_APP_PERMISSION = <span class=\"string\">\"AppPermission\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String id = <span class=\"string\">\"id\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String appUid = <span class=\"string\">\"uid\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String permission = <span class=\"string\">\"permission\"</span>;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 创建表sql语句</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SQL_CREATE_TABLE_PERMISSION = <span class=\"string\">\"CREATE TABLE \"</span> + TABLE_PERMISSION + <span class=\"string\">\"(\"</span> + <span class=\"comment\">//</span></div><div class=\"line\">            id + <span class=\"string\">\" INTEGER PRIMARY KEY AUTOINCREMENT, \"</span> +<span class=\"comment\">//</span></div><div class=\"line\">            permissionCName + <span class=\"string\">\" VARCHAR, \"</span> +<span class=\"comment\">//</span></div><div class=\"line\">            permissionName + <span class=\"string\">\" VARCHAR)\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SQL_CREATE_TABLE_APP_PERMISSION = <span class=\"string\">\"CREATE TABLE \"</span> + TABLE_APP_PERMISSION + <span class=\"string\">\"(\"</span> + <span class=\"comment\">//</span></div><div class=\"line\">            id + <span class=\"string\">\" INTEGER PRIMARY KEY AUTOINCREMENT, \"</span> +<span class=\"comment\">//</span></div><div class=\"line\">            appUid + <span class=\"string\">\" VARCHAR, \"</span> +<span class=\"comment\">//</span></div><div class=\"line\">            permission + <span class=\"string\">\" VARCHAR)\"</span>;</div><div class=\"line\">  </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PermissionHelper</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * 必须有构造方法，参数分别是 上下文、数据库名字、游标工厂（一般null为默认）、数据库版本（数据库的版本必须大于0，否则报错）</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, DB_NAME, <span class=\"keyword\">null</span>, DB_VERSION);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * 主动开启事务执行sql， 没有开启事务，系统会默认每执行一句sql语句就会开启事务</div><div class=\"line\">         * 在第一次打开数据库的时候才会走</div><div class=\"line\">         * 在清除数据之后再次运行--&gt;打开数据库，这个方法会走</div><div class=\"line\">         * 没有清除数据，不会走这个方法</div><div class=\"line\">         * 数据库升级的时候这个方法不会走</div><div class=\"line\">         *</div><div class=\"line\">         */</div><div class=\"line\">        db.beginTransaction();</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            db.execSQL(SQL_CREATE_TABLE_PERMISSION);</div><div class=\"line\">            db.execSQL(SQL_CREATE_TABLE_APP_PERMISSION);</div><div class=\"line\">            db.setTransactionSuccessful();</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            db.endTransaction();</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * 数据库更新操作</div><div class=\"line\">         */</div><div class=\"line\"><span class=\"comment\">//        if (newVersion != oldVersion) &#123;</span></div><div class=\"line\"><span class=\"comment\">//            db.beginTransaction();</span></div><div class=\"line\"><span class=\"comment\">//            try &#123;</span></div><div class=\"line\"><span class=\"comment\">//                db.execSQL(SQL_DELETE_TABLE_APP_PERMISSION);</span></div><div class=\"line\"><span class=\"comment\">//                db.execSQL(SQL_DELETE_TABLE_PERMISSION);</span></div><div class=\"line\"><span class=\"comment\">//                db.execSQL(SQL_CREATE_TABLE_APP_PERMISSION);</span></div><div class=\"line\"><span class=\"comment\">//                db.execSQL(SQL_CREATE_TABLE_PERMISSION);</span></div><div class=\"line\"><span class=\"comment\">//                db.setTransactionSuccessful();</span></div><div class=\"line\"><span class=\"comment\">//            &#125; finally &#123;</span></div><div class=\"line\"><span class=\"comment\">//                db.endTransaction();</span></div><div class=\"line\"><span class=\"comment\">//            &#125;</span></div><div class=\"line\"><span class=\"comment\">//        &#125;</span></div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDowngrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * 降级操作</div><div class=\"line\">         */</div><div class=\"line\">        onUpgrade(db, oldVersion, newVersion);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"2-一般可以创建Manager去管理数据库的操作（设计比较简单-，这里没有对数据库加锁操作）\"><a href=\"#2-一般可以创建Manager去管理数据库的操作（设计比较简单-，这里没有对数据库加锁操作）\" class=\"headerlink\" title=\"2.一般可以创建Manager去管理数据库的操作（设计比较简单 ，这里没有对数据库加锁操作）\"></a>2.一般可以创建Manager去管理数据库的操作（设计比较简单 ，这里没有对数据库加锁操作）</h5><font size=\"3\" color=\"green\">还是用代码说明吧</font>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PermissionDBManager</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</div><div class=\"line\">    <span class=\"keyword\">private</span> PermissionHelper mPermissionHelper;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PermissionDBManager</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mContext = context;</div><div class=\"line\">        mPermissionHelper = <span class=\"keyword\">new</span> PermissionHelper(context);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 数据库插入方法</div><div class=\"line\">     * <span class=\"doctag\">@param</span> uid</div><div class=\"line\">     * <span class=\"doctag\">@param</span> permission</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(String uid, String permission)</span> </span>&#123;</div><div class=\"line\">        SQLiteDatabase db = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            db = mPermissionHelper.getWritableDatabase();</div><div class=\"line\">            ContentValues values = <span class=\"keyword\">new</span> ContentValues();</div><div class=\"line\">            values.put(PermissionHelper.appUid, uid);</div><div class=\"line\">            values.put(PermissionHelper.permission, permission);</div><div class=\"line\">            db.insert(PermissionHelper.TABLE_APP_PERMISSION, <span class=\"keyword\">null</span>, values);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (db != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                db.close();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 根据uid 查询所有的权限</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> uid</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">searchPermission</span><span class=\"params\">(String uid)</span> </span>&#123;</div><div class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        SQLiteDatabase db = <span class=\"keyword\">null</span>;</div><div class=\"line\">        Cursor cursor = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            db = mPermissionHelper.getReadableDatabase();</div><div class=\"line\">            cursor = db.query(PermissionHelper.TABLE_APP_PERMISSION, <span class=\"keyword\">null</span>, PermissionHelper.appUid + <span class=\"string\">\"=?\"</span>, <span class=\"keyword\">new</span> String[]&#123;uid&#125;, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">            <span class=\"keyword\">while</span> (cursor.moveToNext()) &#123;</div><div class=\"line\">                String permission = cursor.getString(cursor.getColumnIndex(PermissionHelper.permission));</div><div class=\"line\">                list.add(permission);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            cursor.close();</div><div class=\"line\">            db.close();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> list;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 根据权限查询所有uid</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> permission</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">searchUid</span><span class=\"params\">(String permission)</span> </span>&#123;</div><div class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        SQLiteDatabase db = <span class=\"keyword\">null</span>;</div><div class=\"line\">        Cursor cursor = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            db = mPermissionHelper.getReadableDatabase();</div><div class=\"line\">            cursor = db.query(PermissionHelper.TABLE_APP_PERMISSION, <span class=\"keyword\">null</span>, PermissionHelper.permission + <span class=\"string\">\"=?\"</span>, <span class=\"keyword\">new</span> String[]&#123;permission&#125;, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">            <span class=\"keyword\">while</span> (cursor.moveToNext()) &#123;</div><div class=\"line\">                String uid = cursor.getString(cursor.getColumnIndex(PermissionHelper.appUid));</div><div class=\"line\">                list.add(uid);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            cursor.close();</div><div class=\"line\">            db.close();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> list;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(String permission, String uid)</span> </span>&#123;</div><div class=\"line\">        SQLiteDatabase db = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            db = mPermissionHelper.getWritableDatabase();</div><div class=\"line\">            String whereClause = <span class=\"string\">\"uid=? and permission =?\"</span>;</div><div class=\"line\">            db.delete(PermissionHelper.TABLE_APP_PERMISSION, whereClause, <span class=\"keyword\">new</span> String[]&#123;uid, permission&#125;);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (db != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                db.close();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 批量插入方法</div><div class=\"line\">     * <span class=\"doctag\">@param</span> map</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addCPermission</span><span class=\"params\">(Map&lt;String, String&gt; map)</span> </span>&#123;</div><div class=\"line\">        SQLiteDatabase db = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            db = mPermissionHelper.getWritableDatabase();</div><div class=\"line\">            String sql = <span class=\"string\">\"insert into\"</span> + PermissionHelper.TABLE_PERMISSION + <span class=\"string\">\"(permissionName,permissionCName) values(?,?)\"</span>;</div><div class=\"line\">            SQLiteStatement stat = db.compileStatement(sql);</div><div class=\"line\">            db.beginTransaction();</div><div class=\"line\">            <span class=\"keyword\">for</span> (Map.Entry&lt;String, String&gt; mEntry : map.entrySet()) &#123;</div><div class=\"line\">                <span class=\"comment\">//循环所要插入的数据</span></div><div class=\"line\">                stat.bindString(<span class=\"number\">1</span>, mEntry.getKey());</div><div class=\"line\">                stat.bindString(<span class=\"number\">2</span>, mEntry.getValue());</div><div class=\"line\">                stat.executeInsert();</div><div class=\"line\">            &#125;</div><div class=\"line\">            db.setTransactionSuccessful();</div><div class=\"line\">            db.endTransaction();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (db != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                db.close();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p> 以上，即可一个简单的数据库操作，写的比较简单</p>\n<h3 id=\"数据库更新策略\"><a href=\"#数据库更新策略\" class=\"headerlink\" title=\"数据库更新策略\"></a>数据库更新策略</h3><p>我们知道在SQLiteOpenHelper的构造方法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">super</span>(Context context, String name, SQLiteDatabase.CursorFactory factory, <span class=\"keyword\">int</span> version)</div></pre></td></tr></table></figure></p>\n<font color=\"blue\">中最后一个参数表示数据库的版本号.当新的版本号大于当前的version时会调用方法onUpgrade。</font><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">onUpgrade(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</div></pre></td></tr></table></figure><br><br>所以我们的重点是在该方法中实现<strong><em>SQLite数据库版本升级</em></strong>的管理,当我们项目刚开始的时候第一版SQLiteOpenHelper是这样写的:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * SQLite数据库版本升级的管理实现</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataBaseOpenHelper</span> <span class=\"keyword\">extends</span> <span class=\"title\">SQLiteOpenHelper</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 数据库名</div><div class=\"line\"> */</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String DATABASE_NAME=<span class=\"string\">\"test.db\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DataBaseOpenHelper mDataBaseOpenHelper;</div><div class=\"line\">  <span class=\"comment\">//创建person表</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CREATE_PERSON=</div><div class=\"line\">  <span class=\"string\">\"create table person(personid integer primary key autoincrement,name varchar(20),phone VARCHAR(12))\"</span>;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DataBaseOpenHelper</span><span class=\"params\">(Context context,String name,CursorFactory factory,<span class=\"keyword\">int</span> version)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context, name, factory, version);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//注意:</span></div><div class=\"line\">  <span class=\"comment\">//将DataBaseOpenHelper写成单例的.</span></div><div class=\"line\">  <span class=\"comment\">//否则当在一个for循环中频繁调用openHelper.getWritableDatabase()时</span></div><div class=\"line\">  <span class=\"comment\">//会报错,提示数据库没有执行关闭操作</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> DataBaseOpenHelper <span class=\"title\">getDBInstance</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mDataBaseOpenHelper == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      mDataBaseOpenHelper = <span class=\"keyword\">new</span> DataBaseOpenHelper(context,DATABASE_NAME,<span class=\"keyword\">null</span>,<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> mDataBaseOpenHelper;</div><div class=\"line\">  &#125; </div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span> </span>&#123;</div><div class=\"line\">    db.execSQL(CREATE_PERSON);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>在几天之后根据项目需求，<font color=\"red\">需要添加一张student表，于是DataBaseOpenHelper就出现了第二版:</font>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataBaseOpenHelper</span> <span class=\"keyword\">extends</span> <span class=\"title\">SQLiteOpenHelper</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//数据库名</span></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String DATABASE_NAME=<span class=\"string\">\"test.db\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DataBaseOpenHelper mDataBaseOpenHelper;</div><div class=\"line\">  <span class=\"comment\">//创建person表</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CREATE_PERSON=</div><div class=\"line\">  <span class=\"string\">\"create table person(personid integer primary key autoincrement,name varchar(20),phone VARCHAR(12))\"</span>;</div><div class=\"line\">  <span class=\"comment\">//创建student表</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CREATE_STUDENT=</div><div class=\"line\">  <span class=\"string\">\"create table student(studentid integer primary key autoincrement,name varchar(20),phone VARCHAR(12))\"</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DataBaseOpenHelper</span><span class=\"params\">(Context context,String name,CursorFactory factory,<span class=\"keyword\">int</span> version)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context, name, factory, version);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//注意:</span></div><div class=\"line\">  <span class=\"comment\">//将DataBaseOpenHelper写成单例的.</span></div><div class=\"line\">  <span class=\"comment\">//否则当在一个for循环中频繁调用openHelper.getWritableDatabase()时</span></div><div class=\"line\">  <span class=\"comment\">//会报错,提示数据库没有执行关闭操作</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> DataBaseOpenHelper <span class=\"title\">getDBInstance</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mDataBaseOpenHelper == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">     <span class=\"comment\">/*</span></div><div class=\"line\">      * <span class=\"doctag\">TODO:</span> 改动1 更改数据版本</div><div class=\"line\">      */</div><div class=\"line\">      mDataBaseOpenHelper = <span class=\"keyword\">new</span> DataBaseOpenHelper(context,DATABASE_NAME,<span class=\"keyword\">null</span>,<span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> mDataBaseOpenHelper;</div><div class=\"line\">  &#125; </div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span> </span>&#123;</div><div class=\"line\">    db.execSQL(CREATE_PERSON);</div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * <span class=\"doctag\">TODO:</span>改动2   老版本  直接创建2张表</div><div class=\"line\">     */</div><div class=\"line\">    db.execSQL(CREATE_STUDENT);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//改动3 根据版本执行不同的sql</span></div><div class=\"line\">    <span class=\"keyword\">switch</span> (oldVersion) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"comment\">//版本1 直接创建新表</span></div><div class=\"line\">    db.execSQL(CREATE_STUDENT);</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>较版本一在版本二中有<strong>三处修改</strong>的地方:</p>\n<ul>\n<li><strong>版本号变成了2:</strong></li>\n<li><strong>在onCreate()方法中添加了代码db.execSQL(CREATE_STUDENT);创建student表</strong></li>\n</ul>\n<font color=\"blue\">因为有的用户根本就没有第一版本的APP，直接从市场下载了第二版本的App。所以当然会执行onCreate()而不会执行onUpgrade()</font>\n\n<ul>\n<li><strong>在onUpgrade()做了处理：当oldVersion为1时调用db.execSQL(CREATE_STUDENT);创建student表</strong></li>\n</ul>\n<font color=\"blue\">因为有的用户手机上本来就有第一版本的APP，所以在App升级到第二版本时会执行onUpgrade()，不会执行onCreate()</font>\n\n<p>通过这样的处理使得不同的情况下使用第二版APP时都会生成student表。</p>\n<font color=\"red\">又过了一个月，根据项目变更，需要给person表添加一个字段genderid，于是DataBaseOpenHelper就出现了第三版:</font>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataBaseOpenHelper</span> <span class=\"keyword\">extends</span> <span class=\"title\">SQLiteOpenHelper</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//数据库名</span></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String DATABASE_NAME=<span class=\"string\">\"test.db\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DataBaseOpenHelper mDataBaseOpenHelper;</div><div class=\"line\">  <span class=\"comment\">//改动1  更改sql语句</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CREATE_PERSON=</div><div class=\"line\">  <span class=\"string\">\"create table person(personid integer primary key autoincrement,name varchar(20),phone VARCHAR(12)),genderid integer)\"</span>;</div><div class=\"line\">  <span class=\"comment\">//新增sql  用于增加列  </span></div><div class=\"line\">  <span class=\"comment\">//详细sql请见 http://blog.leanote.com/post/cornflower1991@163.com/%E4%B8%AA%E4%BA%BA%E4%B8%8D%E5%B8%B8%E7%94%A8%E7%9A%84-sql%E8%AF%AD%E5%8F%A5</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ALTER_PERSON=<span class=\"string\">\"alter table person add column genderid integer\"</span>;</div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CREATE_STUDENT=</div><div class=\"line\">  <span class=\"string\">\"create table student(studentid integer primary key autoincrement,name varchar(20),phone VARCHAR(12))\"</span>;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DataBaseOpenHelper</span><span class=\"params\">(Context context,String name,CursorFactory factory,<span class=\"keyword\">int</span> version)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context, name, factory, version);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//注意:</span></div><div class=\"line\">  <span class=\"comment\">//将DataBaseOpenHelper写成单例的.</span></div><div class=\"line\">  <span class=\"comment\">//否则当在一个for循环中频繁调用openHelper.getWritableDatabase()时</span></div><div class=\"line\">  <span class=\"comment\">//会报错,提示数据库没有执行关闭操作</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> DataBaseOpenHelper <span class=\"title\">getDBInstance</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mDataBaseOpenHelper == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">//改动2 版本更改</span></div><div class=\"line\">      mDataBaseOpenHelper = <span class=\"keyword\">new</span> DataBaseOpenHelper(context,DATABASE_NAME,<span class=\"keyword\">null</span>,<span class=\"number\">3</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> mDataBaseOpenHelper;</div><div class=\"line\">  &#125; </div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span> </span>&#123;</div><div class=\"line\">    db.execSQL(CREATE_PERSON);</div><div class=\"line\">    db.execSQL(CREATE_STUDENT);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (oldVersion) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">    db.execSQL(CREATE_STUDENT);</div><div class=\"line\">    <span class=\"comment\">//改动3</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">    db.execSQL(ALTER_PERSON);</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>较版本二在版本三中有<strong>三处修改</strong>的地方：</p>\n<ul>\n<li><strong>改变了CREATE_PERSON语句，在改语句中增加了一个字段genderid</strong></li>\n</ul>\n<p>和前面的描述类似，有的用户第一次安装该APP时就直接下载了第三版执行Oncreate()。</p>\n<ul>\n<li><p><strong>修改版本号为3 应对了用户从第一版本或者第二版本升级到第三版本的情况(见下分析)</strong></p>\n</li>\n<li><p><strong>在onUpgrade()方法中)做了处理：当oldVersion为2时调用 db.execSQL(ALTER_PERSON);修改person表，增加genderid字段</strong></p>\n</li>\n</ul>\n<p>应对了用户从第二版本升级到第三版本的情况(见下分析)</p>\n<blockquote>\n<p><strong>注意</strong>一个问题：为什么这里的switch语句在每个case中<strong>没有break</strong>？？这是为了保证跨版本升级的时候<strong>每次数据库的升级都会执行到</strong>。</p>\n<ul>\n<li>比如从<strong>第二版升级到第三版本</strong>，那么case 2会被执行。</li>\n<li>比如从<strong>第一版直接升级到第三版本</strong>，那么case 1肯定会被调用，由于没有break所以会传透switch语句又执行case 2语句继续升级，从而保证了数据的所有版本中的升级都会被执行到。</li>\n</ul>\n</blockquote>\n <font color=\"red\"> 以上就是数据库版本更新时注意的地方。</font>\n\n<h3 id=\"查看真机数据库\"><a href=\"#查看真机数据库\" class=\"headerlink\" title=\"查看真机数据库\"></a>查看真机数据库</h3><p>Android手机root之后可以使用 <code>su root</code> 命令查看授权，然后进入data/data目录下。sqlite3命令打不开，可以直接执行<code>cp</code>命令复制到本地，进行查看。当然使用第三方软件如<code>RE管理器</code>等。<br>这里想介绍的是<code>Facebook</code>的调试插件<a href=\"https://github.com/facebook/stetho\" target=\"_blank\" rel=\"external\">stetho</a>，使用该插件你可以在<code>Chrome Developer Tools</code>查看App的布局，网络请求，sqlite，preference等。个人网络请求没怎么用过，不太会用。看数据库和sp还是很爽的，主要是不需要手机<code>root</code>。<br>集成步骤：</p>\n<ul>\n<li><p>1.引入依赖包</p>\n<blockquote>\n<p>  compile ‘com.facebook.stetho:stetho:1.4.1’ </p>\n</blockquote>\n</li>\n<li><p>2.初始化一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">    Stetho.initializeWithDefaults(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>3.运行App, 打开Chrome输入chrome://inspect/#devices（别忘了用数据线把手机和电脑连起来哦）<br><img src=\"http://ogzf36bsb.bkt.clouddn.com/blog/20161122/114633563.png\" alt=\"@运行效果界面 | center\"><br>如上图，chrome会检测到我们的app，点击<code>inspect</code>进入查看页面<br><img src=\"http://ogzf36bsb.bkt.clouddn.com/blog/20161122/114924961.png\" alt=\"@查看App 数据界面 | center\"><br>数据库和sp文件都在Resources标签下，即可查看，还有网络等其他功能就不展示了，更多<a href=\"http://facebook.github.io/stetho/\" target=\"_blank\" rel=\"external\">高级用法</a>。</p>\n</li>\n</ul>\n","excerpt":"<p>Android上的自带数据库SQLite操作，虽然<code>GreenDao</code>和<code>ORMLite</code>都挺厉害的，封装的也都挺好的。不过本篇文章不是介绍这两个开源库，简单介绍了下Android原生数据库的操作</p>\n<h3 id=\"数据库基本操作\"><a href=\"#数据库基本操作\" class=\"headerlink\" title=\"数据库基本操作\"></a>数据库基本操作</h3><h5 id=\"1-首先创建数据库类-SQLiteOpenHelper\"><a href=\"#1-首先创建数据库类-SQLiteOpenHelper\" class=\"headerlink\" title=\"1.首先创建数据库类 SQLiteOpenHelper\"></a>1.首先创建数据库类 SQLiteOpenHelper</h5><font size=\"3\" color=\"green\">就直接上代码吧</font>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PermissionHelper</span> <span class=\"keyword\">extends</span> <span class=\"title\">SQLiteOpenHelper</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 数据库名</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DB_NAME = <span class=\"string\">\"privacymanager.db\"</span>;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">    数据库版本</div><div class=\"line\">    */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DB_VERSION = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">    * 表名</div><div class=\"line\">    */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TABLE_PERMISSION = <span class=\"string\">\"Permission\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String permissionName = <span class=\"string\">\"permissionName\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String permissionCName = <span class=\"string\">\"permissionCName\"</span>;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 应用权限表</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TABLE_APP_PERMISSION = <span class=\"string\">\"AppPermission\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String id = <span class=\"string\">\"id\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String appUid = <span class=\"string\">\"uid\"</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String permission = <span class=\"string\">\"permission\"</span>;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 创建表sql语句</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SQL_CREATE_TABLE_PERMISSION = <span class=\"string\">\"CREATE TABLE \"</span> + TABLE_PERMISSION + <span class=\"string\">\"(\"</span> + <span class=\"comment\">//</span></div><div class=\"line\">            id + <span class=\"string\">\" INTEGER PRIMARY KEY AUTOINCREMENT, \"</span> +<span class=\"comment\">//</span></div><div class=\"line\">            permissionCName + <span class=\"string\">\" VARCHAR, \"</span> +<span class=\"comment\">//</span></div><div class=\"line\">            permissionName + <span class=\"string\">\" VARCHAR)\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SQL_CREATE_TABLE_APP_PERMISSION = <span class=\"string\">\"CREATE TABLE \"</span> + TABLE_APP_PERMISSION + <span class=\"string\">\"(\"</span> + <span class=\"comment\">//</span></div><div class=\"line\">            id + <span class=\"string\">\" INTEGER PRIMARY KEY AUTOINCREMENT, \"</span> +<span class=\"comment\">//</span></div><div class=\"line\">            appUid + <span class=\"string\">\" VARCHAR, \"</span> +<span class=\"comment\">//</span></div><div class=\"line\">            permission + <span class=\"string\">\" VARCHAR)\"</span>;</div><div class=\"line\">  </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PermissionHelper</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * 必须有构造方法，参数分别是 上下文、数据库名字、游标工厂（一般null为默认）、数据库版本（数据库的版本必须大于0，否则报错）</div><div class=\"line\">         */</span></div><div class=\"line\">        <span class=\"keyword\">super</span>(context, DB_NAME, <span class=\"keyword\">null</span>, DB_VERSION);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * 主动开启事务执行sql， 没有开启事务，系统会默认每执行一句sql语句就会开启事务</div><div class=\"line\">         * 在第一次打开数据库的时候才会走</div><div class=\"line\">         * 在清除数据之后再次运行--&gt;打开数据库，这个方法会走</div><div class=\"line\">         * 没有清除数据，不会走这个方法</div><div class=\"line\">         * 数据库升级的时候这个方法不会走</div><div class=\"line\">         *</div><div class=\"line\">         */</span></div><div class=\"line\">        db.beginTransaction();</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            db.execSQL(SQL_CREATE_TABLE_PERMISSION);</div><div class=\"line\">            db.execSQL(SQL_CREATE_TABLE_APP_PERMISSION);</div><div class=\"line\">            db.setTransactionSuccessful();</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            db.endTransaction();</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * 数据库更新操作</div><div class=\"line\">         */</span></div><div class=\"line\"><span class=\"comment\">//        if (newVersion != oldVersion) &#123;</span></div><div class=\"line\"><span class=\"comment\">//            db.beginTransaction();</span></div><div class=\"line\"><span class=\"comment\">//            try &#123;</span></div><div class=\"line\"><span class=\"comment\">//                db.execSQL(SQL_DELETE_TABLE_APP_PERMISSION);</span></div><div class=\"line\"><span class=\"comment\">//                db.execSQL(SQL_DELETE_TABLE_PERMISSION);</span></div><div class=\"line\"><span class=\"comment\">//                db.execSQL(SQL_CREATE_TABLE_APP_PERMISSION);</span></div><div class=\"line\"><span class=\"comment\">//                db.execSQL(SQL_CREATE_TABLE_PERMISSION);</span></div><div class=\"line\"><span class=\"comment\">//                db.setTransactionSuccessful();</span></div><div class=\"line\"><span class=\"comment\">//            &#125; finally &#123;</span></div><div class=\"line\"><span class=\"comment\">//                db.endTransaction();</span></div><div class=\"line\"><span class=\"comment\">//            &#125;</span></div><div class=\"line\"><span class=\"comment\">//        &#125;</span></div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDowngrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * 降级操作</div><div class=\"line\">         */</span></div><div class=\"line\">        onUpgrade(db, oldVersion, newVersion);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"2-一般可以创建Manager去管理数据库的操作（设计比较简单-，这里没有对数据库加锁操作）\"><a href=\"#2-一般可以创建Manager去管理数据库的操作（设计比较简单-，这里没有对数据库加锁操作）\" class=\"headerlink\" title=\"2.一般可以创建Manager去管理数据库的操作（设计比较简单 ，这里没有对数据库加锁操作）\"></a>2.一般可以创建Manager去管理数据库的操作（设计比较简单 ，这里没有对数据库加锁操作）</h5><font size=\"3\" color=\"green\">还是用代码说明吧</font>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PermissionDBManager</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</div><div class=\"line\">    <span class=\"keyword\">private</span> PermissionHelper mPermissionHelper;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PermissionDBManager</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mContext = context;</div><div class=\"line\">        mPermissionHelper = <span class=\"keyword\">new</span> PermissionHelper(context);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 数据库插入方法</div><div class=\"line\">     * <span class=\"doctag\">@param</span> uid</div><div class=\"line\">     * <span class=\"doctag\">@param</span> permission</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(String uid, String permission)</span> </span>&#123;</div><div class=\"line\">        SQLiteDatabase db = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            db = mPermissionHelper.getWritableDatabase();</div><div class=\"line\">            ContentValues values = <span class=\"keyword\">new</span> ContentValues();</div><div class=\"line\">            values.put(PermissionHelper.appUid, uid);</div><div class=\"line\">            values.put(PermissionHelper.permission, permission);</div><div class=\"line\">            db.insert(PermissionHelper.TABLE_APP_PERMISSION, <span class=\"keyword\">null</span>, values);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (db != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                db.close();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 根据uid 查询所有的权限</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> uid</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">searchPermission</span><span class=\"params\">(String uid)</span> </span>&#123;</div><div class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        SQLiteDatabase db = <span class=\"keyword\">null</span>;</div><div class=\"line\">        Cursor cursor = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            db = mPermissionHelper.getReadableDatabase();</div><div class=\"line\">            cursor = db.query(PermissionHelper.TABLE_APP_PERMISSION, <span class=\"keyword\">null</span>, PermissionHelper.appUid + <span class=\"string\">\"=?\"</span>, <span class=\"keyword\">new</span> String[]&#123;uid&#125;, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">            <span class=\"keyword\">while</span> (cursor.moveToNext()) &#123;</div><div class=\"line\">                String permission = cursor.getString(cursor.getColumnIndex(PermissionHelper.permission));</div><div class=\"line\">                list.add(permission);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            cursor.close();</div><div class=\"line\">            db.close();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> list;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 根据权限查询所有uid</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> permission</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">searchUid</span><span class=\"params\">(String permission)</span> </span>&#123;</div><div class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        SQLiteDatabase db = <span class=\"keyword\">null</span>;</div><div class=\"line\">        Cursor cursor = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            db = mPermissionHelper.getReadableDatabase();</div><div class=\"line\">            cursor = db.query(PermissionHelper.TABLE_APP_PERMISSION, <span class=\"keyword\">null</span>, PermissionHelper.permission + <span class=\"string\">\"=?\"</span>, <span class=\"keyword\">new</span> String[]&#123;permission&#125;, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">            <span class=\"keyword\">while</span> (cursor.moveToNext()) &#123;</div><div class=\"line\">                String uid = cursor.getString(cursor.getColumnIndex(PermissionHelper.appUid));</div><div class=\"line\">                list.add(uid);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            cursor.close();</div><div class=\"line\">            db.close();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> list;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(String permission, String uid)</span> </span>&#123;</div><div class=\"line\">        SQLiteDatabase db = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            db = mPermissionHelper.getWritableDatabase();</div><div class=\"line\">            String whereClause = <span class=\"string\">\"uid=? and permission =?\"</span>;</div><div class=\"line\">            db.delete(PermissionHelper.TABLE_APP_PERMISSION, whereClause, <span class=\"keyword\">new</span> String[]&#123;uid, permission&#125;);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (db != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                db.close();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 批量插入方法</div><div class=\"line\">     * <span class=\"doctag\">@param</span> map</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addCPermission</span><span class=\"params\">(Map&lt;String, String&gt; map)</span> </span>&#123;</div><div class=\"line\">        SQLiteDatabase db = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            db = mPermissionHelper.getWritableDatabase();</div><div class=\"line\">            String sql = <span class=\"string\">\"insert into\"</span> + PermissionHelper.TABLE_PERMISSION + <span class=\"string\">\"(permissionName,permissionCName) values(?,?)\"</span>;</div><div class=\"line\">            SQLiteStatement stat = db.compileStatement(sql);</div><div class=\"line\">            db.beginTransaction();</div><div class=\"line\">            <span class=\"keyword\">for</span> (Map.Entry&lt;String, String&gt; mEntry : map.entrySet()) &#123;</div><div class=\"line\">                <span class=\"comment\">//循环所要插入的数据</span></div><div class=\"line\">                stat.bindString(<span class=\"number\">1</span>, mEntry.getKey());</div><div class=\"line\">                stat.bindString(<span class=\"number\">2</span>, mEntry.getValue());</div><div class=\"line\">                stat.executeInsert();</div><div class=\"line\">            &#125;</div><div class=\"line\">            db.setTransactionSuccessful();</div><div class=\"line\">            db.endTransaction();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            <span class=\"comment\">// <span class=\"doctag\">TODO:</span> handle exception</span></div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (db != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                db.close();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p> 以上，即可一个简单的数据库操作，写的比较简单</p>\n<h3 id=\"数据库更新策略\"><a href=\"#数据库更新策略\" class=\"headerlink\" title=\"数据库更新策略\"></a>数据库更新策略</h3><p>我们知道在SQLiteOpenHelper的构造方法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">super</span>(Context context, String name, SQLiteDatabase.CursorFactory factory, <span class=\"keyword\">int</span> version)</div></pre></td></tr></table></figure></p>\n<font color=\"blue\">中最后一个参数表示数据库的版本号.当新的版本号大于当前的version时会调用方法onUpgrade。</font><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">onUpgrade(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</div></pre></td></tr></table></figure><br><br>所以我们的重点是在该方法中实现<strong><em>SQLite数据库版本升级</em></strong>的管理,当我们项目刚开始的时候第一版SQLiteOpenHelper是这样写的:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * SQLite数据库版本升级的管理实现</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataBaseOpenHelper</span> <span class=\"keyword\">extends</span> <span class=\"title\">SQLiteOpenHelper</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 数据库名</div><div class=\"line\"> */</span></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String DATABASE_NAME=<span class=\"string\">\"test.db\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DataBaseOpenHelper mDataBaseOpenHelper;</div><div class=\"line\">  <span class=\"comment\">//创建person表</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CREATE_PERSON=</div><div class=\"line\">  <span class=\"string\">\"create table person(personid integer primary key autoincrement,name varchar(20),phone VARCHAR(12))\"</span>;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DataBaseOpenHelper</span><span class=\"params\">(Context context,String name,CursorFactory factory,<span class=\"keyword\">int</span> version)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context, name, factory, version);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//注意:</span></div><div class=\"line\">  <span class=\"comment\">//将DataBaseOpenHelper写成单例的.</span></div><div class=\"line\">  <span class=\"comment\">//否则当在一个for循环中频繁调用openHelper.getWritableDatabase()时</span></div><div class=\"line\">  <span class=\"comment\">//会报错,提示数据库没有执行关闭操作</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> DataBaseOpenHelper <span class=\"title\">getDBInstance</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mDataBaseOpenHelper == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      mDataBaseOpenHelper = <span class=\"keyword\">new</span> DataBaseOpenHelper(context,DATABASE_NAME,<span class=\"keyword\">null</span>,<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> mDataBaseOpenHelper;</div><div class=\"line\">  &#125; </div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span> </span>&#123;</div><div class=\"line\">    db.execSQL(CREATE_PERSON);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure><br><br>在几天之后根据项目需求，<font color=\"red\">需要添加一张student表，于是DataBaseOpenHelper就出现了第二版:</font>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataBaseOpenHelper</span> <span class=\"keyword\">extends</span> <span class=\"title\">SQLiteOpenHelper</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//数据库名</span></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String DATABASE_NAME=<span class=\"string\">\"test.db\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DataBaseOpenHelper mDataBaseOpenHelper;</div><div class=\"line\">  <span class=\"comment\">//创建person表</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CREATE_PERSON=</div><div class=\"line\">  <span class=\"string\">\"create table person(personid integer primary key autoincrement,name varchar(20),phone VARCHAR(12))\"</span>;</div><div class=\"line\">  <span class=\"comment\">//创建student表</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CREATE_STUDENT=</div><div class=\"line\">  <span class=\"string\">\"create table student(studentid integer primary key autoincrement,name varchar(20),phone VARCHAR(12))\"</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DataBaseOpenHelper</span><span class=\"params\">(Context context,String name,CursorFactory factory,<span class=\"keyword\">int</span> version)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context, name, factory, version);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//注意:</span></div><div class=\"line\">  <span class=\"comment\">//将DataBaseOpenHelper写成单例的.</span></div><div class=\"line\">  <span class=\"comment\">//否则当在一个for循环中频繁调用openHelper.getWritableDatabase()时</span></div><div class=\"line\">  <span class=\"comment\">//会报错,提示数据库没有执行关闭操作</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> DataBaseOpenHelper <span class=\"title\">getDBInstance</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mDataBaseOpenHelper == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">     <span class=\"comment\">/*</div><div class=\"line\">      * <span class=\"doctag\">TODO:</span> 改动1 更改数据版本</div><div class=\"line\">      */</span></div><div class=\"line\">      mDataBaseOpenHelper = <span class=\"keyword\">new</span> DataBaseOpenHelper(context,DATABASE_NAME,<span class=\"keyword\">null</span>,<span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> mDataBaseOpenHelper;</div><div class=\"line\">  &#125; </div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span> </span>&#123;</div><div class=\"line\">    db.execSQL(CREATE_PERSON);</div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * <span class=\"doctag\">TODO:</span>改动2   老版本  直接创建2张表</div><div class=\"line\">     */</span></div><div class=\"line\">    db.execSQL(CREATE_STUDENT);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//改动3 根据版本执行不同的sql</span></div><div class=\"line\">    <span class=\"keyword\">switch</span> (oldVersion) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"comment\">//版本1 直接创建新表</span></div><div class=\"line\">    db.execSQL(CREATE_STUDENT);</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>较版本一在版本二中有<strong>三处修改</strong>的地方:</p>\n<ul>\n<li><strong>版本号变成了2:</strong></li>\n<li><strong>在onCreate()方法中添加了代码db.execSQL(CREATE_STUDENT);创建student表</strong></li>\n</ul>\n<font color=blue>因为有的用户根本就没有第一版本的APP，直接从市场下载了第二版本的App。所以当然会执行onCreate()而不会执行onUpgrade()</font>\n\n<ul>\n<li><strong>在onUpgrade()做了处理：当oldVersion为1时调用db.execSQL(CREATE_STUDENT);创建student表</strong></li>\n</ul>\n<font color=blue>因为有的用户手机上本来就有第一版本的APP，所以在App升级到第二版本时会执行onUpgrade()，不会执行onCreate()</font>\n\n<p>通过这样的处理使得不同的情况下使用第二版APP时都会生成student表。</p>\n<font color=red>又过了一个月，根据项目变更，需要给person表添加一个字段genderid，于是DataBaseOpenHelper就出现了第三版:</font>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataBaseOpenHelper</span> <span class=\"keyword\">extends</span> <span class=\"title\">SQLiteOpenHelper</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//数据库名</span></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String DATABASE_NAME=<span class=\"string\">\"test.db\"</span>;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DataBaseOpenHelper mDataBaseOpenHelper;</div><div class=\"line\">  <span class=\"comment\">//改动1  更改sql语句</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CREATE_PERSON=</div><div class=\"line\">  <span class=\"string\">\"create table person(personid integer primary key autoincrement,name varchar(20),phone VARCHAR(12)),genderid integer)\"</span>;</div><div class=\"line\">  <span class=\"comment\">//新增sql  用于增加列  </span></div><div class=\"line\">  <span class=\"comment\">//详细sql请见 http://blog.leanote.com/post/cornflower1991@163.com/%E4%B8%AA%E4%BA%BA%E4%B8%8D%E5%B8%B8%E7%94%A8%E7%9A%84-sql%E8%AF%AD%E5%8F%A5</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ALTER_PERSON=<span class=\"string\">\"alter table person add column genderid integer\"</span>;</div><div class=\"line\">  </div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CREATE_STUDENT=</div><div class=\"line\">  <span class=\"string\">\"create table student(studentid integer primary key autoincrement,name varchar(20),phone VARCHAR(12))\"</span>;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DataBaseOpenHelper</span><span class=\"params\">(Context context,String name,CursorFactory factory,<span class=\"keyword\">int</span> version)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context, name, factory, version);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//注意:</span></div><div class=\"line\">  <span class=\"comment\">//将DataBaseOpenHelper写成单例的.</span></div><div class=\"line\">  <span class=\"comment\">//否则当在一个for循环中频繁调用openHelper.getWritableDatabase()时</span></div><div class=\"line\">  <span class=\"comment\">//会报错,提示数据库没有执行关闭操作</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> DataBaseOpenHelper <span class=\"title\">getDBInstance</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mDataBaseOpenHelper == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">//改动2 版本更改</span></div><div class=\"line\">      mDataBaseOpenHelper = <span class=\"keyword\">new</span> DataBaseOpenHelper(context,DATABASE_NAME,<span class=\"keyword\">null</span>,<span class=\"number\">3</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> mDataBaseOpenHelper;</div><div class=\"line\">  &#125; </div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(SQLiteDatabase db)</span> </span>&#123;</div><div class=\"line\">    db.execSQL(CREATE_PERSON);</div><div class=\"line\">    db.execSQL(CREATE_STUDENT);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (oldVersion) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">    db.execSQL(CREATE_STUDENT);</div><div class=\"line\">    <span class=\"comment\">//改动3</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">    db.execSQL(ALTER_PERSON);</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>较版本二在版本三中有<strong>三处修改</strong>的地方：</p>\n<ul>\n<li><strong>改变了CREATE_PERSON语句，在改语句中增加了一个字段genderid</strong></li>\n</ul>\n<p>和前面的描述类似，有的用户第一次安装该APP时就直接下载了第三版执行Oncreate()。</p>\n<ul>\n<li><p><strong>修改版本号为3 应对了用户从第一版本或者第二版本升级到第三版本的情况(见下分析)</strong></p>\n</li>\n<li><p><strong>在onUpgrade()方法中)做了处理：当oldVersion为2时调用 db.execSQL(ALTER_PERSON);修改person表，增加genderid字段</strong></p>\n</li>\n</ul>\n<p>应对了用户从第二版本升级到第三版本的情况(见下分析)</p>\n<blockquote>\n<p><strong>注意</strong>一个问题：为什么这里的switch语句在每个case中<strong>没有break</strong>？？这是为了保证跨版本升级的时候<strong>每次数据库的升级都会执行到</strong>。</p>\n<ul>\n<li>比如从<strong>第二版升级到第三版本</strong>，那么case 2会被执行。</li>\n<li>比如从<strong>第一版直接升级到第三版本</strong>，那么case 1肯定会被调用，由于没有break所以会传透switch语句又执行case 2语句继续升级，从而保证了数据的所有版本中的升级都会被执行到。</li>\n</ul>\n</blockquote>\n <font color=red> 以上就是数据库版本更新时注意的地方。</font>\n\n<h3 id=\"查看真机数据库\"><a href=\"#查看真机数据库\" class=\"headerlink\" title=\"查看真机数据库\"></a>查看真机数据库</h3><p>Android手机root之后可以使用 <code>su root</code> 命令查看授权，然后进入data/data目录下。sqlite3命令打不开，可以直接执行<code>cp</code>命令复制到本地，进行查看。当然使用第三方软件如<code>RE管理器</code>等。<br>这里想介绍的是<code>Facebook</code>的调试插件<a href=\"https://github.com/facebook/stetho\">stetho</a>，使用该插件你可以在<code>Chrome Developer Tools</code>查看App的布局，网络请求，sqlite，preference等。个人网络请求没怎么用过，不太会用。看数据库和sp还是很爽的，主要是不需要手机<code>root</code>。<br>集成步骤：</p>\n<ul>\n<li><p>1.引入依赖包</p>\n<blockquote>\n<p>  compile ‘com.facebook.stetho:stetho:1.4.1’ </p>\n</blockquote>\n</li>\n<li><p>2.初始化一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">    Stetho.initializeWithDefaults(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>3.运行App, 打开Chrome输入chrome://inspect/#devices（别忘了用数据线把手机和电脑连起来哦）<br><img src=\"http://ogzf36bsb.bkt.clouddn.com/blog/20161122/114633563.png\" alt=\"@运行效果界面 | center\"><br>如上图，chrome会检测到我们的app，点击<code>inspect</code>进入查看页面<br><img src=\"http://ogzf36bsb.bkt.clouddn.com/blog/20161122/114924961.png\" alt=\"@查看App 数据界面 | center\"><br>数据库和sp文件都在Resources标签下，即可查看，还有网络等其他功能就不展示了，更多<a href=\"http://facebook.github.io/stetho/\">高级用法</a>。</p>\n</li>\n</ul>"},{"title":"git使用","_content":"\n## 一、git配置\n>git config \n>git config  --global\n>git config  --system\n\nGit的三个配置文件分别是**版本库级别**的配置文件（/.git/config）、**全局配置文件**（用户主目录下）和**系统级配置文件**（/etc目录下）。这个命令的作用是打开相应的配置文件，并且进行编辑。其中**版本库级别的配置文件的优先级最高**，全局配置文件次之，系统级别配置文件最低。\n\n在全局空间中添加新的用户\n>git config --global user.name \"xxx\"\n>git config --global user.email xxx@github.com\n\n删除git全局配置文件中的用户名\n<!--more-->\n>git config --unset --global user.name\n>git config --unset --global user.email\n\n### 创建ssh \n\n- **查看是否已经有了ssh密钥** ：$ cd ~/.ssh，如果没有密钥则不会有此文件夹，有则备份删除\n- **生成密钥**：$ ssh-keygen -t rsa -C “youremail@yourcompany.com”，按3个回车，密码为空。会在 ~/.ssh/ 目录下生成 id_rsa 和 id_rsa.pub 两个文件\n- **如果想要生成多个账户**：执行生成秘钥命令，**注意不要一路回车**，要给这个文件起一个名字，输入命令后第一步 输入文件的名称， 比如叫 id_rsa_github, 所以相应的也会生成一个 id_rsa_github.pub 文件。后续密码可以继续回车。\n![@生成的文件 | center](http://ogzf36bsb.bkt.clouddn.com/blog/20161121/155701141.png)\n- **添加私钥**：如果只有一个只需要添加一个即可\n\t ssh-add ~/.ssh/id_rsa \n\t ssh-add ~/.ssh/id_rsa_github  \n\t>**注意**：如果执行ssh-add时提示\"Could not open a connection to your authentication  agent\"，可以现执行命令：$ ssh-agent bash\n\n\t然后再运行ssh-add命令,可以通过 ssh-add -l 来确私钥列表 可以通过 ssh-add -D 来清空私钥列表\n- **修改配置文件**, 在 ~/.ssh 目录下新建一个config文件\n>touch config\n>添加内容：已添加github和gitlib为例\n``` perl\n# gitlabHost gitlab.com\n   HostName gitlab.com\n   PreferredAuthentications publickey\n   IdentityFile ~/.ssh/id_rsa\n# githubHost github.com\n   HostName github.com\n   PreferredAuthentications publickey\n   IdentityFile ~/.ssh/id_rsa_github\n```\n- **测试**\n>ssh -T git@github.com\n>ssh -T git@gitlib.com\n输出\nHi user! You've successfully authenticated, but GitHub does not provide shell access. 就表示成功的连上了。\n\n## 二、新建仓库\n\n\n>在当前目录新建一个Git代码库\n>$ git init \n\n>新建一个目录，将其初始化为Git代码库\n> $ git init [project-name]\n\n >下载一个项目和它的整个代码历史提交\n> $ git clone [url]\n\n\n## 三、添加、删除文件\n\n>添加指定文件到暂存区\n>$ git add ...\n\n >添加当前目录的所有文件到暂存区\n>$ git add .\n\n如果有多次修改只想暂存一个文件的部分改动，比如你修改了2个bug，但是只想缓存第一个修改的地方，可以使用该命令git add -p\n你会有如下选择\n>输入y来缓存该块\n>输入n不缓存该块\n>输入e来人工编辑该块\n>输入d来退出或进入下一个文件\n>输入s来分割这个块\n\n>选择你需要的操作\n>$ git add -p\n\n >删除工作区文件，并且将这次删除放入暂存区\n>$ git rm [file1] [file2] ...\n\n >停止追踪指定文件，但该文件会保留在工作区\n>$ git rm --cached [file]\n\n> 改名文件，并且将这个改名放入暂存区\n>$ git mv [file-original] [file-renamed]\n\n## 四、代码提交\n\n>提交暂存区到仓库区\n> $ git commit -m [message]\n\n>提交暂存区的指定文件到仓库区\n>$ git commit [file1] [file2] ... -m [message]\n\n>提交工作区自上次commit之后的变化，直接到仓库区\n>$ git commit -a\n\n>提交时显示所有diff信息\n>$ git commit -v\n\n## 五、远程同步\n\n>下载远程仓库的所有变动\n>$ git fetch [remote]\n\n>显示所有远程仓库\n>$ git remote -v\n\n>显示某个远程仓库的信息\n>$ git remote show [remote]\n\n>增加一个新的远程仓库，并命名\n>$ git remote add [shortname] [url]\n\n>取回远程仓库的变化，并与本地分支合并\n>$ git pull [remote] [branch]\n\n>上传本地指定分支到远程仓库\n>$ git push [remote] [branch]\n\n>强行推送当前分支到远程仓库，即使有冲突\n>$ git push [remote] --force\n\n>推送所有分支到远程仓库\n>$ git push [remote] --all\n\n## 六、撤销\n\n>恢复暂存区的指定文件到工作区\n>$ git checkout [file]\n\n >恢复某个commit的指定文件到暂存区和工作区\n>$ git checkout [commit] [file]\n\n>恢复暂存区的所有文件到工作区\n>$ git checkout .\n\n>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n>$ git reset [file]\n\n>重置暂存区与工作区，与上一次commit保持一致\n>$ git reset --hard\n\n>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n>$ git reset [commit]\n \n >重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n>$ git reset --hard [commit]\n\n>重置当前HEAD为指定commit，但保持暂存区和工作区不变\n>$ git reset --keep [commit]\n\n>新建一个commit，用来撤销指定commit后者的所有变化都将被前者抵消，并且应用到当前分支\n>$ git revert [commit]\n\n>暂时将未提交的变化移除，稍后再移入\n> git stash \n> git stash pop\n> \n## 七、查看信息\n\n>显示有变更的文件\n>$ git status\n\n>显示当前分支的版本历史\n>$ git log\n\n>显示commit历史，以及每次commit发生变更的文件\n>$ git log --stat\n\n >搜索提交历史，根据关键词\n>$ git log -S [keyword]\n\n >显示某个文件的版本历史，包括文件改名\n> git log --follow [file]\n> git whatchanged [file]\n\n>显示指定文件相关的每一次diff\n>$ git log -p [file]\n\n>显示过去5次提交\n>$ git log -5 --pretty --oneline\n\n> 显示所有提交过的用户，按提交次数排序\n>$ git shortlog -sn\n\n>显示指定文件是什么人在什么时间修改过\n>$ git blame [file]\n\n>显示暂存区和工作区的差异\n>$ git diff\n\n >显示暂存区和上一个commit的差异\n>$ git diff --cached [file]\n\n> 显示工作区与当前分支最新commit之间的差异\n>$ git diff HEAD\n\n >显示两次提交之间的差异\n>$ git diff [first-branch]...[second-branch]\n\n>显示某次提交的元数据和内容变化\n>$ git show [commit]\n\n>显示某次提交发生变化的文件\n>$ git show --name-only [commit]\n\n>显示当前分支的最近几次提交\n>$ git reflog\n>\n## 八、分支\n\n>列出所有本地分支\n>$ git branch\n\n> 列出所有远程分支\n>$ git branch -r\n\n>列出所有本地分支和远程分支\n>$ git branch -a\n\n>新建一个分支，但依然停留在当前分支\n>$ git branch [branch-name]\n\n> 新建一个分支，并切换到该分支\n>$ git checkout -b [branch]\n\n>新建一个分支，指向指定commit\n>$ git branch [branch] [commit]\n\n>新建一个分支，与指定的远程分支建立追踪关系\n>$ git branch --track [branch] [remote-branch]\n\n> 切换到指定分支，并更新工作区\n>$ git checkout [branch-name]\n\n>切换到上一个分支\n>$ git checkout -\n\n>合并指定分支到当前分支\n>$ git merge [branch]\n\n>选择一个commit，合并进当前分支\n>$ git cherry-pick [commit]\n\n>删除分支\n>$ git branch -d [branch-name]\n\n> 删除远程分支\n>  git push origin --delete [branch-name]\n>  git branch -dr [remote/branch]","source":"_posts/git.md","raw":"---\ntitle: git使用   \ntags: [git]\n---\n\n## 一、git配置\n>git config \n>git config  --global\n>git config  --system\n\nGit的三个配置文件分别是**版本库级别**的配置文件（/.git/config）、**全局配置文件**（用户主目录下）和**系统级配置文件**（/etc目录下）。这个命令的作用是打开相应的配置文件，并且进行编辑。其中**版本库级别的配置文件的优先级最高**，全局配置文件次之，系统级别配置文件最低。\n\n在全局空间中添加新的用户\n>git config --global user.name \"xxx\"\n>git config --global user.email xxx@github.com\n\n删除git全局配置文件中的用户名\n<!--more-->\n>git config --unset --global user.name\n>git config --unset --global user.email\n\n### 创建ssh \n\n- **查看是否已经有了ssh密钥** ：$ cd ~/.ssh，如果没有密钥则不会有此文件夹，有则备份删除\n- **生成密钥**：$ ssh-keygen -t rsa -C “youremail@yourcompany.com”，按3个回车，密码为空。会在 ~/.ssh/ 目录下生成 id_rsa 和 id_rsa.pub 两个文件\n- **如果想要生成多个账户**：执行生成秘钥命令，**注意不要一路回车**，要给这个文件起一个名字，输入命令后第一步 输入文件的名称， 比如叫 id_rsa_github, 所以相应的也会生成一个 id_rsa_github.pub 文件。后续密码可以继续回车。\n![@生成的文件 | center](http://ogzf36bsb.bkt.clouddn.com/blog/20161121/155701141.png)\n- **添加私钥**：如果只有一个只需要添加一个即可\n\t ssh-add ~/.ssh/id_rsa \n\t ssh-add ~/.ssh/id_rsa_github  \n\t>**注意**：如果执行ssh-add时提示\"Could not open a connection to your authentication  agent\"，可以现执行命令：$ ssh-agent bash\n\n\t然后再运行ssh-add命令,可以通过 ssh-add -l 来确私钥列表 可以通过 ssh-add -D 来清空私钥列表\n- **修改配置文件**, 在 ~/.ssh 目录下新建一个config文件\n>touch config\n>添加内容：已添加github和gitlib为例\n``` perl\n# gitlabHost gitlab.com\n   HostName gitlab.com\n   PreferredAuthentications publickey\n   IdentityFile ~/.ssh/id_rsa\n# githubHost github.com\n   HostName github.com\n   PreferredAuthentications publickey\n   IdentityFile ~/.ssh/id_rsa_github\n```\n- **测试**\n>ssh -T git@github.com\n>ssh -T git@gitlib.com\n输出\nHi user! You've successfully authenticated, but GitHub does not provide shell access. 就表示成功的连上了。\n\n## 二、新建仓库\n\n\n>在当前目录新建一个Git代码库\n>$ git init \n\n>新建一个目录，将其初始化为Git代码库\n> $ git init [project-name]\n\n >下载一个项目和它的整个代码历史提交\n> $ git clone [url]\n\n\n## 三、添加、删除文件\n\n>添加指定文件到暂存区\n>$ git add ...\n\n >添加当前目录的所有文件到暂存区\n>$ git add .\n\n如果有多次修改只想暂存一个文件的部分改动，比如你修改了2个bug，但是只想缓存第一个修改的地方，可以使用该命令git add -p\n你会有如下选择\n>输入y来缓存该块\n>输入n不缓存该块\n>输入e来人工编辑该块\n>输入d来退出或进入下一个文件\n>输入s来分割这个块\n\n>选择你需要的操作\n>$ git add -p\n\n >删除工作区文件，并且将这次删除放入暂存区\n>$ git rm [file1] [file2] ...\n\n >停止追踪指定文件，但该文件会保留在工作区\n>$ git rm --cached [file]\n\n> 改名文件，并且将这个改名放入暂存区\n>$ git mv [file-original] [file-renamed]\n\n## 四、代码提交\n\n>提交暂存区到仓库区\n> $ git commit -m [message]\n\n>提交暂存区的指定文件到仓库区\n>$ git commit [file1] [file2] ... -m [message]\n\n>提交工作区自上次commit之后的变化，直接到仓库区\n>$ git commit -a\n\n>提交时显示所有diff信息\n>$ git commit -v\n\n## 五、远程同步\n\n>下载远程仓库的所有变动\n>$ git fetch [remote]\n\n>显示所有远程仓库\n>$ git remote -v\n\n>显示某个远程仓库的信息\n>$ git remote show [remote]\n\n>增加一个新的远程仓库，并命名\n>$ git remote add [shortname] [url]\n\n>取回远程仓库的变化，并与本地分支合并\n>$ git pull [remote] [branch]\n\n>上传本地指定分支到远程仓库\n>$ git push [remote] [branch]\n\n>强行推送当前分支到远程仓库，即使有冲突\n>$ git push [remote] --force\n\n>推送所有分支到远程仓库\n>$ git push [remote] --all\n\n## 六、撤销\n\n>恢复暂存区的指定文件到工作区\n>$ git checkout [file]\n\n >恢复某个commit的指定文件到暂存区和工作区\n>$ git checkout [commit] [file]\n\n>恢复暂存区的所有文件到工作区\n>$ git checkout .\n\n>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n>$ git reset [file]\n\n>重置暂存区与工作区，与上一次commit保持一致\n>$ git reset --hard\n\n>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n>$ git reset [commit]\n \n >重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n>$ git reset --hard [commit]\n\n>重置当前HEAD为指定commit，但保持暂存区和工作区不变\n>$ git reset --keep [commit]\n\n>新建一个commit，用来撤销指定commit后者的所有变化都将被前者抵消，并且应用到当前分支\n>$ git revert [commit]\n\n>暂时将未提交的变化移除，稍后再移入\n> git stash \n> git stash pop\n> \n## 七、查看信息\n\n>显示有变更的文件\n>$ git status\n\n>显示当前分支的版本历史\n>$ git log\n\n>显示commit历史，以及每次commit发生变更的文件\n>$ git log --stat\n\n >搜索提交历史，根据关键词\n>$ git log -S [keyword]\n\n >显示某个文件的版本历史，包括文件改名\n> git log --follow [file]\n> git whatchanged [file]\n\n>显示指定文件相关的每一次diff\n>$ git log -p [file]\n\n>显示过去5次提交\n>$ git log -5 --pretty --oneline\n\n> 显示所有提交过的用户，按提交次数排序\n>$ git shortlog -sn\n\n>显示指定文件是什么人在什么时间修改过\n>$ git blame [file]\n\n>显示暂存区和工作区的差异\n>$ git diff\n\n >显示暂存区和上一个commit的差异\n>$ git diff --cached [file]\n\n> 显示工作区与当前分支最新commit之间的差异\n>$ git diff HEAD\n\n >显示两次提交之间的差异\n>$ git diff [first-branch]...[second-branch]\n\n>显示某次提交的元数据和内容变化\n>$ git show [commit]\n\n>显示某次提交发生变化的文件\n>$ git show --name-only [commit]\n\n>显示当前分支的最近几次提交\n>$ git reflog\n>\n## 八、分支\n\n>列出所有本地分支\n>$ git branch\n\n> 列出所有远程分支\n>$ git branch -r\n\n>列出所有本地分支和远程分支\n>$ git branch -a\n\n>新建一个分支，但依然停留在当前分支\n>$ git branch [branch-name]\n\n> 新建一个分支，并切换到该分支\n>$ git checkout -b [branch]\n\n>新建一个分支，指向指定commit\n>$ git branch [branch] [commit]\n\n>新建一个分支，与指定的远程分支建立追踪关系\n>$ git branch --track [branch] [remote-branch]\n\n> 切换到指定分支，并更新工作区\n>$ git checkout [branch-name]\n\n>切换到上一个分支\n>$ git checkout -\n\n>合并指定分支到当前分支\n>$ git merge [branch]\n\n>选择一个commit，合并进当前分支\n>$ git cherry-pick [commit]\n\n>删除分支\n>$ git branch -d [branch-name]\n\n> 删除远程分支\n>  git push origin --delete [branch-name]\n>  git branch -dr [remote/branch]","slug":"git","published":1,"date":"2018-04-25T00:50:28.000Z","updated":"2016-11-21T08:53:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgerv96r0005ht9ogbmz39mb","content":"<h2 id=\"一、git配置\"><a href=\"#一、git配置\" class=\"headerlink\" title=\"一、git配置\"></a>一、git配置</h2><blockquote>\n<p>git config<br>git config  –global<br>git config  –system</p>\n</blockquote>\n<p>Git的三个配置文件分别是<strong>版本库级别</strong>的配置文件（/.git/config）、<strong>全局配置文件</strong>（用户主目录下）和<strong>系统级配置文件</strong>（/etc目录下）。这个命令的作用是打开相应的配置文件，并且进行编辑。其中<strong>版本库级别的配置文件的优先级最高</strong>，全局配置文件次之，系统级别配置文件最低。</p>\n<p>在全局空间中添加新的用户</p>\n<blockquote>\n<p>git config –global user.name “xxx”<br>git config –global user.email xxx@github.com</p>\n</blockquote>\n<p>删除git全局配置文件中的用户名<br><a id=\"more\"></a></p>\n<blockquote>\n<p>git config –unset –global user.name<br>git config –unset –global user.email</p>\n</blockquote>\n<h3 id=\"创建ssh\"><a href=\"#创建ssh\" class=\"headerlink\" title=\"创建ssh\"></a>创建ssh</h3><ul>\n<li><strong>查看是否已经有了ssh密钥</strong> ：$ cd ~/.ssh，如果没有密钥则不会有此文件夹，有则备份删除</li>\n<li><strong>生成密钥</strong>：$ ssh-keygen -t rsa -C “youremail@yourcompany.com”，按3个回车，密码为空。会在 ~/.ssh/ 目录下生成 id_rsa 和 id_rsa.pub 两个文件</li>\n<li><strong>如果想要生成多个账户</strong>：执行生成秘钥命令，<strong>注意不要一路回车</strong>，要给这个文件起一个名字，输入命令后第一步 输入文件的名称， 比如叫 id_rsa_github, 所以相应的也会生成一个 id_rsa_github.pub 文件。后续密码可以继续回车。<br><img src=\"http://ogzf36bsb.bkt.clouddn.com/blog/20161121/155701141.png\" alt=\"@生成的文件 | center\"></li>\n<li><p><strong>添加私钥</strong>：如果只有一个只需要添加一个即可<br>   ssh-add ~/.ssh/id_rsa<br>   ssh-add ~/.ssh/id_rsa_github  </p>\n<blockquote>\n<p><strong>注意</strong>：如果执行ssh-add时提示”Could not open a connection to your authentication  agent”，可以现执行命令：$ ssh-agent bash</p>\n</blockquote>\n<p>  然后再运行ssh-add命令,可以通过 ssh-add -l 来确私钥列表 可以通过 ssh-add -D 来清空私钥列表</p>\n</li>\n<li><p><strong>修改配置文件</strong>, 在 ~/.ssh 目录下新建一个config文件</p>\n<blockquote>\n<p>touch config<br>添加内容：已添加github和gitlib为例</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># gitlabHost gitlab.com</span></div><div class=\"line\">   HostName gitlab.com</div><div class=\"line\">   PreferredAuthentications publickey</div><div class=\"line\">   IdentityFile ~<span class=\"regexp\">/.ssh/id</span>_rsa</div><div class=\"line\"><span class=\"comment\"># githubHost github.com</span></div><div class=\"line\">   HostName github.com</div><div class=\"line\">   PreferredAuthentications publickey</div><div class=\"line\">   IdentityFile ~<span class=\"regexp\">/.ssh/id</span>_rsa_github</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p><strong>测试</strong></p>\n<blockquote>\n<p>ssh -T git@github.com<br>ssh -T git@gitlib.com<br>输出<br>Hi user! You’ve successfully authenticated, but GitHub does not provide shell access. 就表示成功的连上了。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"二、新建仓库\"><a href=\"#二、新建仓库\" class=\"headerlink\" title=\"二、新建仓库\"></a>二、新建仓库</h2><blockquote>\n<p>在当前目录新建一个Git代码库<br>$ git init </p>\n<p>新建一个目录，将其初始化为Git代码库<br>$ git init [project-name]</p>\n<p>下载一个项目和它的整个代码历史提交<br>$ git clone [url]</p>\n</blockquote>\n<h2 id=\"三、添加、删除文件\"><a href=\"#三、添加、删除文件\" class=\"headerlink\" title=\"三、添加、删除文件\"></a>三、添加、删除文件</h2><blockquote>\n<p>添加指定文件到暂存区<br>$ git add …</p>\n<p>添加当前目录的所有文件到暂存区<br>$ git add .</p>\n</blockquote>\n<p>如果有多次修改只想暂存一个文件的部分改动，比如你修改了2个bug，但是只想缓存第一个修改的地方，可以使用该命令git add -p<br>你会有如下选择</p>\n<blockquote>\n<p>输入y来缓存该块<br>输入n不缓存该块<br>输入e来人工编辑该块<br>输入d来退出或进入下一个文件<br>输入s来分割这个块</p>\n<p>选择你需要的操作<br>$ git add -p</p>\n<p>删除工作区文件，并且将这次删除放入暂存区<br>$ git rm [file1] [file2] …</p>\n<p>停止追踪指定文件，但该文件会保留在工作区<br>$ git rm –cached [file]</p>\n<p>改名文件，并且将这个改名放入暂存区<br>$ git mv [file-original] [file-renamed]</p>\n</blockquote>\n<h2 id=\"四、代码提交\"><a href=\"#四、代码提交\" class=\"headerlink\" title=\"四、代码提交\"></a>四、代码提交</h2><blockquote>\n<p>提交暂存区到仓库区<br>$ git commit -m [message]</p>\n<p>提交暂存区的指定文件到仓库区<br>$ git commit [file1] [file2] … -m [message]</p>\n<p>提交工作区自上次commit之后的变化，直接到仓库区<br>$ git commit -a</p>\n<p>提交时显示所有diff信息<br>$ git commit -v</p>\n</blockquote>\n<h2 id=\"五、远程同步\"><a href=\"#五、远程同步\" class=\"headerlink\" title=\"五、远程同步\"></a>五、远程同步</h2><blockquote>\n<p>下载远程仓库的所有变动<br>$ git fetch [remote]</p>\n<p>显示所有远程仓库<br>$ git remote -v</p>\n<p>显示某个远程仓库的信息<br>$ git remote show [remote]</p>\n<p>增加一个新的远程仓库，并命名<br>$ git remote add [shortname] [url]</p>\n<p>取回远程仓库的变化，并与本地分支合并<br>$ git pull [remote] [branch]</p>\n<p>上传本地指定分支到远程仓库<br>$ git push [remote] [branch]</p>\n<p>强行推送当前分支到远程仓库，即使有冲突<br>$ git push [remote] –force</p>\n<p>推送所有分支到远程仓库<br>$ git push [remote] –all</p>\n</blockquote>\n<h2 id=\"六、撤销\"><a href=\"#六、撤销\" class=\"headerlink\" title=\"六、撤销\"></a>六、撤销</h2><blockquote>\n<p>恢复暂存区的指定文件到工作区<br>$ git checkout [file]</p>\n<p>恢复某个commit的指定文件到暂存区和工作区<br>$ git checkout [commit] [file]</p>\n<p>恢复暂存区的所有文件到工作区<br>$ git checkout .</p>\n<p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变<br>$ git reset [file]</p>\n<p>重置暂存区与工作区，与上一次commit保持一致<br>$ git reset –hard</p>\n<p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变<br>$ git reset [commit]</p>\n<p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致<br>$ git reset –hard [commit]</p>\n<p>重置当前HEAD为指定commit，但保持暂存区和工作区不变<br>$ git reset –keep [commit]</p>\n<p>新建一个commit，用来撤销指定commit后者的所有变化都将被前者抵消，并且应用到当前分支<br>$ git revert [commit]</p>\n<p>暂时将未提交的变化移除，稍后再移入<br>git stash<br>git stash pop</p>\n<h2 id=\"七、查看信息\"><a href=\"#七、查看信息\" class=\"headerlink\" title=\"七、查看信息\"></a>七、查看信息</h2><p>显示有变更的文件<br>$ git status</p>\n<p>显示当前分支的版本历史<br>$ git log</p>\n<p>显示commit历史，以及每次commit发生变更的文件<br>$ git log –stat</p>\n<p>搜索提交历史，根据关键词<br>$ git log -S [keyword]</p>\n<p>显示某个文件的版本历史，包括文件改名<br>git log –follow [file]<br>git whatchanged [file]</p>\n<p>显示指定文件相关的每一次diff<br>$ git log -p [file]</p>\n<p>显示过去5次提交<br>$ git log -5 –pretty –oneline</p>\n<p>显示所有提交过的用户，按提交次数排序<br>$ git shortlog -sn</p>\n<p>显示指定文件是什么人在什么时间修改过<br>$ git blame [file]</p>\n<p>显示暂存区和工作区的差异<br>$ git diff</p>\n<p>显示暂存区和上一个commit的差异<br>$ git diff –cached [file]</p>\n<p>显示工作区与当前分支最新commit之间的差异<br>$ git diff HEAD</p>\n<p>显示两次提交之间的差异<br>$ git diff [first-branch]…[second-branch]</p>\n<p>显示某次提交的元数据和内容变化<br>$ git show [commit]</p>\n<p>显示某次提交发生变化的文件<br>$ git show –name-only [commit]</p>\n<p>显示当前分支的最近几次提交<br>$ git reflog</p>\n<h2 id=\"八、分支\"><a href=\"#八、分支\" class=\"headerlink\" title=\"八、分支\"></a>八、分支</h2><p>列出所有本地分支<br>$ git branch</p>\n<p>列出所有远程分支<br>$ git branch -r</p>\n<p>列出所有本地分支和远程分支<br>$ git branch -a</p>\n<p>新建一个分支，但依然停留在当前分支<br>$ git branch [branch-name]</p>\n<p>新建一个分支，并切换到该分支<br>$ git checkout -b [branch]</p>\n<p>新建一个分支，指向指定commit<br>$ git branch [branch] [commit]</p>\n<p>新建一个分支，与指定的远程分支建立追踪关系<br>$ git branch –track [branch] [remote-branch]</p>\n<p>切换到指定分支，并更新工作区<br>$ git checkout [branch-name]</p>\n<p>切换到上一个分支<br>$ git checkout -</p>\n<p>合并指定分支到当前分支<br>$ git merge [branch]</p>\n<p>选择一个commit，合并进当前分支<br>$ git cherry-pick [commit]</p>\n<p>删除分支<br>$ git branch -d [branch-name]</p>\n<p>删除远程分支<br> git push origin –delete [branch-name]<br> git branch -dr [remote/branch]</p>\n</blockquote>\n","excerpt":"<h2 id=\"一、git配置\"><a href=\"#一、git配置\" class=\"headerlink\" title=\"一、git配置\"></a>一、git配置</h2><blockquote>\n<p>git config<br>git config  –global<br>git config  –system</p>\n</blockquote>\n<p>Git的三个配置文件分别是<strong>版本库级别</strong>的配置文件（/.git/config）、<strong>全局配置文件</strong>（用户主目录下）和<strong>系统级配置文件</strong>（/etc目录下）。这个命令的作用是打开相应的配置文件，并且进行编辑。其中<strong>版本库级别的配置文件的优先级最高</strong>，全局配置文件次之，系统级别配置文件最低。</p>\n<p>在全局空间中添加新的用户</p>\n<blockquote>\n<p>git config –global user.name “xxx”<br>git config –global user.email xxx@github.com</p>\n</blockquote>\n<p>删除git全局配置文件中的用户名<br>","more":"</p>\n<blockquote>\n<p>git config –unset –global user.name<br>git config –unset –global user.email</p>\n</blockquote>\n<h3 id=\"创建ssh\"><a href=\"#创建ssh\" class=\"headerlink\" title=\"创建ssh\"></a>创建ssh</h3><ul>\n<li><strong>查看是否已经有了ssh密钥</strong> ：$ cd ~/.ssh，如果没有密钥则不会有此文件夹，有则备份删除</li>\n<li><strong>生成密钥</strong>：$ ssh-keygen -t rsa -C “youremail@yourcompany.com”，按3个回车，密码为空。会在 ~/.ssh/ 目录下生成 id_rsa 和 id_rsa.pub 两个文件</li>\n<li><strong>如果想要生成多个账户</strong>：执行生成秘钥命令，<strong>注意不要一路回车</strong>，要给这个文件起一个名字，输入命令后第一步 输入文件的名称， 比如叫 id_rsa_github, 所以相应的也会生成一个 id_rsa_github.pub 文件。后续密码可以继续回车。<br><img src=\"http://ogzf36bsb.bkt.clouddn.com/blog/20161121/155701141.png\" alt=\"@生成的文件 | center\"></li>\n<li><p><strong>添加私钥</strong>：如果只有一个只需要添加一个即可<br>   ssh-add ~/.ssh/id_rsa<br>   ssh-add ~/.ssh/id_rsa_github  </p>\n<blockquote>\n<p><strong>注意</strong>：如果执行ssh-add时提示”Could not open a connection to your authentication  agent”，可以现执行命令：$ ssh-agent bash</p>\n</blockquote>\n<p>  然后再运行ssh-add命令,可以通过 ssh-add -l 来确私钥列表 可以通过 ssh-add -D 来清空私钥列表</p>\n</li>\n<li><p><strong>修改配置文件</strong>, 在 ~/.ssh 目录下新建一个config文件</p>\n<blockquote>\n<p>touch config<br>添加内容：已添加github和gitlib为例</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># gitlabHost gitlab.com</span></div><div class=\"line\">   HostName gitlab.com</div><div class=\"line\">   PreferredAuthentications publickey</div><div class=\"line\">   IdentityFile ~<span class=\"regexp\">/.ssh/id</span>_rsa</div><div class=\"line\"><span class=\"comment\"># githubHost github.com</span></div><div class=\"line\">   HostName github.com</div><div class=\"line\">   PreferredAuthentications publickey</div><div class=\"line\">   IdentityFile ~<span class=\"regexp\">/.ssh/id</span>_rsa_github</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p><strong>测试</strong></p>\n<blockquote>\n<p>ssh -T git@github.com<br>ssh -T git@gitlib.com<br>输出<br>Hi user! You’ve successfully authenticated, but GitHub does not provide shell access. 就表示成功的连上了。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"二、新建仓库\"><a href=\"#二、新建仓库\" class=\"headerlink\" title=\"二、新建仓库\"></a>二、新建仓库</h2><blockquote>\n<p>在当前目录新建一个Git代码库<br>$ git init </p>\n<p>新建一个目录，将其初始化为Git代码库<br>$ git init [project-name]</p>\n<p>下载一个项目和它的整个代码历史提交<br>$ git clone [url]</p>\n</blockquote>\n<h2 id=\"三、添加、删除文件\"><a href=\"#三、添加、删除文件\" class=\"headerlink\" title=\"三、添加、删除文件\"></a>三、添加、删除文件</h2><blockquote>\n<p>添加指定文件到暂存区<br>$ git add …</p>\n<p>添加当前目录的所有文件到暂存区<br>$ git add .</p>\n</blockquote>\n<p>如果有多次修改只想暂存一个文件的部分改动，比如你修改了2个bug，但是只想缓存第一个修改的地方，可以使用该命令git add -p<br>你会有如下选择</p>\n<blockquote>\n<p>输入y来缓存该块<br>输入n不缓存该块<br>输入e来人工编辑该块<br>输入d来退出或进入下一个文件<br>输入s来分割这个块</p>\n<p>选择你需要的操作<br>$ git add -p</p>\n<p>删除工作区文件，并且将这次删除放入暂存区<br>$ git rm [file1] [file2] …</p>\n<p>停止追踪指定文件，但该文件会保留在工作区<br>$ git rm –cached [file]</p>\n<p>改名文件，并且将这个改名放入暂存区<br>$ git mv [file-original] [file-renamed]</p>\n</blockquote>\n<h2 id=\"四、代码提交\"><a href=\"#四、代码提交\" class=\"headerlink\" title=\"四、代码提交\"></a>四、代码提交</h2><blockquote>\n<p>提交暂存区到仓库区<br>$ git commit -m [message]</p>\n<p>提交暂存区的指定文件到仓库区<br>$ git commit [file1] [file2] … -m [message]</p>\n<p>提交工作区自上次commit之后的变化，直接到仓库区<br>$ git commit -a</p>\n<p>提交时显示所有diff信息<br>$ git commit -v</p>\n</blockquote>\n<h2 id=\"五、远程同步\"><a href=\"#五、远程同步\" class=\"headerlink\" title=\"五、远程同步\"></a>五、远程同步</h2><blockquote>\n<p>下载远程仓库的所有变动<br>$ git fetch [remote]</p>\n<p>显示所有远程仓库<br>$ git remote -v</p>\n<p>显示某个远程仓库的信息<br>$ git remote show [remote]</p>\n<p>增加一个新的远程仓库，并命名<br>$ git remote add [shortname] [url]</p>\n<p>取回远程仓库的变化，并与本地分支合并<br>$ git pull [remote] [branch]</p>\n<p>上传本地指定分支到远程仓库<br>$ git push [remote] [branch]</p>\n<p>强行推送当前分支到远程仓库，即使有冲突<br>$ git push [remote] –force</p>\n<p>推送所有分支到远程仓库<br>$ git push [remote] –all</p>\n</blockquote>\n<h2 id=\"六、撤销\"><a href=\"#六、撤销\" class=\"headerlink\" title=\"六、撤销\"></a>六、撤销</h2><blockquote>\n<p>恢复暂存区的指定文件到工作区<br>$ git checkout [file]</p>\n<p>恢复某个commit的指定文件到暂存区和工作区<br>$ git checkout [commit] [file]</p>\n<p>恢复暂存区的所有文件到工作区<br>$ git checkout .</p>\n<p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变<br>$ git reset [file]</p>\n<p>重置暂存区与工作区，与上一次commit保持一致<br>$ git reset –hard</p>\n<p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变<br>$ git reset [commit]</p>\n<p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致<br>$ git reset –hard [commit]</p>\n<p>重置当前HEAD为指定commit，但保持暂存区和工作区不变<br>$ git reset –keep [commit]</p>\n<p>新建一个commit，用来撤销指定commit后者的所有变化都将被前者抵消，并且应用到当前分支<br>$ git revert [commit]</p>\n<p>暂时将未提交的变化移除，稍后再移入<br>git stash<br>git stash pop</p>\n<h2 id=\"七、查看信息\"><a href=\"#七、查看信息\" class=\"headerlink\" title=\"七、查看信息\"></a>七、查看信息</h2><p>显示有变更的文件<br>$ git status</p>\n<p>显示当前分支的版本历史<br>$ git log</p>\n<p>显示commit历史，以及每次commit发生变更的文件<br>$ git log –stat</p>\n<p>搜索提交历史，根据关键词<br>$ git log -S [keyword]</p>\n<p>显示某个文件的版本历史，包括文件改名<br>git log –follow [file]<br>git whatchanged [file]</p>\n<p>显示指定文件相关的每一次diff<br>$ git log -p [file]</p>\n<p>显示过去5次提交<br>$ git log -5 –pretty –oneline</p>\n<p>显示所有提交过的用户，按提交次数排序<br>$ git shortlog -sn</p>\n<p>显示指定文件是什么人在什么时间修改过<br>$ git blame [file]</p>\n<p>显示暂存区和工作区的差异<br>$ git diff</p>\n<p>显示暂存区和上一个commit的差异<br>$ git diff –cached [file]</p>\n<p>显示工作区与当前分支最新commit之间的差异<br>$ git diff HEAD</p>\n<p>显示两次提交之间的差异<br>$ git diff [first-branch]…[second-branch]</p>\n<p>显示某次提交的元数据和内容变化<br>$ git show [commit]</p>\n<p>显示某次提交发生变化的文件<br>$ git show –name-only [commit]</p>\n<p>显示当前分支的最近几次提交<br>$ git reflog</p>\n<h2 id=\"八、分支\"><a href=\"#八、分支\" class=\"headerlink\" title=\"八、分支\"></a>八、分支</h2><p>列出所有本地分支<br>$ git branch</p>\n<p>列出所有远程分支<br>$ git branch -r</p>\n<p>列出所有本地分支和远程分支<br>$ git branch -a</p>\n<p>新建一个分支，但依然停留在当前分支<br>$ git branch [branch-name]</p>\n<p>新建一个分支，并切换到该分支<br>$ git checkout -b [branch]</p>\n<p>新建一个分支，指向指定commit<br>$ git branch [branch] [commit]</p>\n<p>新建一个分支，与指定的远程分支建立追踪关系<br>$ git branch –track [branch] [remote-branch]</p>\n<p>切换到指定分支，并更新工作区<br>$ git checkout [branch-name]</p>\n<p>切换到上一个分支<br>$ git checkout -</p>\n<p>合并指定分支到当前分支<br>$ git merge [branch]</p>\n<p>选择一个commit，合并进当前分支<br>$ git cherry-pick [commit]</p>\n<p>删除分支<br>$ git branch -d [branch-name]</p>\n<p>删除远程分支<br> git push origin –delete [branch-name]<br> git branch -dr [remote/branch]</p>\n</blockquote>"},{"title":"Android中的内存泄露","date":"2016-11-22T07:25:54.000Z","_content":"#### Android中的常见内存泄露\nAndroid应用程序本身系统分配的内存有限，一旦发生泄漏，程序就会变得卡顿，直至**OOM**崩溃。简单分析下常见的错误\n##### 非静态内部类会持有外部类的一个隐式引用\n  Activity是如何泄漏的，只要**非静态的匿名类对象**没有被回收，Activity就不会被回收，Activity所关联的资源和视图都不会被回收，发生比较严重的`内存泄漏`。\n看这个问题之前，我们先回顾下java的**内部类**\n``` java\nclass Outter{\n    public class Inner {}\n    public void foo(Inner c){\n        System.out.println(c);\n    }\n}\npublic class Main {\n    public static void main(String[] args)throws Exception{\n        Outter o1 = new Outter();\n        Outter o2 = new Outter();\n        Outter.Inner i1 = o1.new Inner();\n        Outter.Inner i2 = o2.new Inner();\n        o1.foo(i2);\n    }\n}\n```\n**非静态的内部类会持有外部类的一个隐式引用**，上面在Outter类内部定义了Inner类，在后边main里创建了两个Inner实例，注意创建内部类的时候\n> Outter.Inner i1 = o1.new Inner();\n\n**注意：**在用new**创建内部类**时，前边必须限定外部对象(内部类实例必须要访问到外部对象引用)：o1；如果是在 Outter类内部这个外部引用可以省略，它**默认会用传递外部this引用**。\n\n``` java\nclass Outter {\n \n    public class Inner{}\n \n    public void test() {\n        new Inner(); // 相当于this.new Inner(); 也可以写为Outter.this.new Inner();\n    }\n} \n```\n\n换成我们的Activity\n\n``` java\npublic class MainActivity extends Activity {\n \n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    exampleOne();\n  }\n \n  private void exampleOne() {\n    newThread() {//匿名内部类，非静态的匿名类会持有外部类的一个隐式引用\n      @Override\n      publicvoid run() {\n        while(true) {\n          SystemClock.sleep(1000);\n        }\n      }\n    }.start();\n  }\n}\n```\n这个匿名的Thread类会**持有外部的Activity**的对象，从而造成`内存泄露`。\n要解决MainActivity的内存泄漏问题，只需把非静态的Thread匿名类定义成静态的内部类就行了（静态的内部类不会持有外部类的一个隐式引用）\n\n``` java\npublic class MainActivity extends Activity {\n  private MyThread mThread;\n \n  @Override\n  protectedvoid onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    exampleThree();\n  }\n \n  privatevoid exampleThree() {\n    mThread = new MyThread();\n    mThread.start();\n  }\n \n  private static class MyThread extends Thread {\n    private boolean mRunning = false;\n \n    @Override\n    publicvoid run() {\n      mRunning = true;\n      while(mRunning) {\n        SystemClock.sleep(1000);\n      }\n    }\n \n    publicvoid close() {\n      mRunning = false;\n    }\n  }\n \n  @Override\n  protectedvoid onDestroy() {\n    super.onDestroy();\n    if(mThread!=null)\n        mThread.close();\n  }\n}\n```\n这样当Activity结束销毁时，MyThread不会持有外部Activity的引用也就不会内存泄露。在onDestroy()方法中结束了新创建的线程，保证了thread不会发生泄漏。\n\n#### 其他常见内存泄露方式\n- 数据库Cursor没有关闭\n- 调用registerReceiver后未调用解绑（unregisterReceiver）\n- 流对象InputStream/OutputStream未关闭\n- Bitmap使用后未调用recycle()\n- activity使用静态成员\n- 等等。。。。\n\n泄露的方式很多，就不一一列举了。怎么去避免，去发现才是关键。下面简单说明下如何发现内存泄露\n\n###### 1.使用开源框架LeakCanary\nLeakCanary的优点，使用简单，展示效果好。下面介绍如何使用\n在 `build.gradle` 中加入引用\n\n```gradle\n dependencies {\n   debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3'\n   releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3'\n }\n```\n在 Application 中注册：\n``` java\npublic class App extends Application {\n\n  @Override public void onCreate() {\n    super.onCreate();\n    LeakCanary.install(this);\n  }\n}\n```\n 这样，在 debug的时候，如果检测到某个 activity 有内存泄露，LeakCanary 就是自动地显示一个通知。\n 更多介绍请看[LeakCanary 中文使用说明][1]\n###### 2.使用Android Studio自带工具\n打开Android Studio，编译代码，在模拟器或者真机上运行App，然后点击![mark](http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161148890.png)，在Android Monitor下点击Monitor对应的Tab，进入如下界面\n![mark](http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161234794.png)\n在Memory一栏中，可以观察不同时间App内存的动态使用情况，**点击![mark](http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161348283.png)**可以手动触发GC，**点击![mark](http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161402738.png)**可以进入HPROF Viewer界面，查看Java的Heap，如下图\n![mark](http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161426494.png)\n`Reference Tree`代表指向该实例的引用，可以从这里面查看内存泄漏的原因，`Shallow Size`指的是该对象本身占用内存的大小，`Retained Size`代表该对象被释放后，垃圾回收器能回收的内存总和。\n下面以一个`栗子`说明，`Memory Monitor`里面观察App的内存使用曲线，突然发现，纳尼！！！怎么内存使用越来越大了，这就很有可能是发生内存泄漏了，然后点击手动进行GC，再点击观看JavaHeap，**点击Analyzer Task**，Android Monitor就可以为我们自动分析泄漏的Activity啦，分析出来如下图所示\n![mark](http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161633995.png)\n点击直接定位到该单例中的代码，发现代码中出现了\n``` java\npublic static VideoTagHelper getInstance(Context context) {\n        if (tagHelper == null) {\n            tagHelper = new VideoTagHelper();\n        }\n        tagHelper.context = context;\n        return tagHelper;\n    }\n```\n我们可以看到持有该Activity的单例对象,导致了内存泄露。直接修改为context.getApplicationContext()即可。这样就和Activity没关系了\n\n###### 3.使用MAT分析\n使用`Memory Monitor`导出hprof文件， 这个文件在Android Studio中的Captrues这个目录中可以看到。\n![@hprof文件目录| center](http://ogzf36bsb.bkt.clouddn.com/blog/20161122/171011086.png)\n\n\n\n\n\n\n\n[1]: https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/\n ","source":"_posts/memory leak.md","raw":"---\ntitle: Android中的内存泄露\ndate: 2016-11-22 15:25:54\ntags:\n---\n#### Android中的常见内存泄露\nAndroid应用程序本身系统分配的内存有限，一旦发生泄漏，程序就会变得卡顿，直至**OOM**崩溃。简单分析下常见的错误\n##### 非静态内部类会持有外部类的一个隐式引用\n  Activity是如何泄漏的，只要**非静态的匿名类对象**没有被回收，Activity就不会被回收，Activity所关联的资源和视图都不会被回收，发生比较严重的`内存泄漏`。\n看这个问题之前，我们先回顾下java的**内部类**\n``` java\nclass Outter{\n    public class Inner {}\n    public void foo(Inner c){\n        System.out.println(c);\n    }\n}\npublic class Main {\n    public static void main(String[] args)throws Exception{\n        Outter o1 = new Outter();\n        Outter o2 = new Outter();\n        Outter.Inner i1 = o1.new Inner();\n        Outter.Inner i2 = o2.new Inner();\n        o1.foo(i2);\n    }\n}\n```\n**非静态的内部类会持有外部类的一个隐式引用**，上面在Outter类内部定义了Inner类，在后边main里创建了两个Inner实例，注意创建内部类的时候\n> Outter.Inner i1 = o1.new Inner();\n\n**注意：**在用new**创建内部类**时，前边必须限定外部对象(内部类实例必须要访问到外部对象引用)：o1；如果是在 Outter类内部这个外部引用可以省略，它**默认会用传递外部this引用**。\n\n``` java\nclass Outter {\n \n    public class Inner{}\n \n    public void test() {\n        new Inner(); // 相当于this.new Inner(); 也可以写为Outter.this.new Inner();\n    }\n} \n```\n\n换成我们的Activity\n\n``` java\npublic class MainActivity extends Activity {\n \n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    exampleOne();\n  }\n \n  private void exampleOne() {\n    newThread() {//匿名内部类，非静态的匿名类会持有外部类的一个隐式引用\n      @Override\n      publicvoid run() {\n        while(true) {\n          SystemClock.sleep(1000);\n        }\n      }\n    }.start();\n  }\n}\n```\n这个匿名的Thread类会**持有外部的Activity**的对象，从而造成`内存泄露`。\n要解决MainActivity的内存泄漏问题，只需把非静态的Thread匿名类定义成静态的内部类就行了（静态的内部类不会持有外部类的一个隐式引用）\n\n``` java\npublic class MainActivity extends Activity {\n  private MyThread mThread;\n \n  @Override\n  protectedvoid onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    exampleThree();\n  }\n \n  privatevoid exampleThree() {\n    mThread = new MyThread();\n    mThread.start();\n  }\n \n  private static class MyThread extends Thread {\n    private boolean mRunning = false;\n \n    @Override\n    publicvoid run() {\n      mRunning = true;\n      while(mRunning) {\n        SystemClock.sleep(1000);\n      }\n    }\n \n    publicvoid close() {\n      mRunning = false;\n    }\n  }\n \n  @Override\n  protectedvoid onDestroy() {\n    super.onDestroy();\n    if(mThread!=null)\n        mThread.close();\n  }\n}\n```\n这样当Activity结束销毁时，MyThread不会持有外部Activity的引用也就不会内存泄露。在onDestroy()方法中结束了新创建的线程，保证了thread不会发生泄漏。\n\n#### 其他常见内存泄露方式\n- 数据库Cursor没有关闭\n- 调用registerReceiver后未调用解绑（unregisterReceiver）\n- 流对象InputStream/OutputStream未关闭\n- Bitmap使用后未调用recycle()\n- activity使用静态成员\n- 等等。。。。\n\n泄露的方式很多，就不一一列举了。怎么去避免，去发现才是关键。下面简单说明下如何发现内存泄露\n\n###### 1.使用开源框架LeakCanary\nLeakCanary的优点，使用简单，展示效果好。下面介绍如何使用\n在 `build.gradle` 中加入引用\n\n```gradle\n dependencies {\n   debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3'\n   releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3'\n }\n```\n在 Application 中注册：\n``` java\npublic class App extends Application {\n\n  @Override public void onCreate() {\n    super.onCreate();\n    LeakCanary.install(this);\n  }\n}\n```\n 这样，在 debug的时候，如果检测到某个 activity 有内存泄露，LeakCanary 就是自动地显示一个通知。\n 更多介绍请看[LeakCanary 中文使用说明][1]\n###### 2.使用Android Studio自带工具\n打开Android Studio，编译代码，在模拟器或者真机上运行App，然后点击![mark](http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161148890.png)，在Android Monitor下点击Monitor对应的Tab，进入如下界面\n![mark](http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161234794.png)\n在Memory一栏中，可以观察不同时间App内存的动态使用情况，**点击![mark](http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161348283.png)**可以手动触发GC，**点击![mark](http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161402738.png)**可以进入HPROF Viewer界面，查看Java的Heap，如下图\n![mark](http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161426494.png)\n`Reference Tree`代表指向该实例的引用，可以从这里面查看内存泄漏的原因，`Shallow Size`指的是该对象本身占用内存的大小，`Retained Size`代表该对象被释放后，垃圾回收器能回收的内存总和。\n下面以一个`栗子`说明，`Memory Monitor`里面观察App的内存使用曲线，突然发现，纳尼！！！怎么内存使用越来越大了，这就很有可能是发生内存泄漏了，然后点击手动进行GC，再点击观看JavaHeap，**点击Analyzer Task**，Android Monitor就可以为我们自动分析泄漏的Activity啦，分析出来如下图所示\n![mark](http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161633995.png)\n点击直接定位到该单例中的代码，发现代码中出现了\n``` java\npublic static VideoTagHelper getInstance(Context context) {\n        if (tagHelper == null) {\n            tagHelper = new VideoTagHelper();\n        }\n        tagHelper.context = context;\n        return tagHelper;\n    }\n```\n我们可以看到持有该Activity的单例对象,导致了内存泄露。直接修改为context.getApplicationContext()即可。这样就和Activity没关系了\n\n###### 3.使用MAT分析\n使用`Memory Monitor`导出hprof文件， 这个文件在Android Studio中的Captrues这个目录中可以看到。\n![@hprof文件目录| center](http://ogzf36bsb.bkt.clouddn.com/blog/20161122/171011086.png)\n\n\n\n\n\n\n\n[1]: https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/\n ","slug":"memory leak","published":1,"updated":"2016-11-22T10:47:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgerv96s0008ht9oojm0zra4","content":"<h4 id=\"Android中的常见内存泄露\"><a href=\"#Android中的常见内存泄露\" class=\"headerlink\" title=\"Android中的常见内存泄露\"></a>Android中的常见内存泄露</h4><p>Android应用程序本身系统分配的内存有限，一旦发生泄漏，程序就会变得卡顿，直至<strong>OOM</strong>崩溃。简单分析下常见的错误</p>\n<h5 id=\"非静态内部类会持有外部类的一个隐式引用\"><a href=\"#非静态内部类会持有外部类的一个隐式引用\" class=\"headerlink\" title=\"非静态内部类会持有外部类的一个隐式引用\"></a>非静态内部类会持有外部类的一个隐式引用</h5><p>  Activity是如何泄漏的，只要<strong>非静态的匿名类对象</strong>没有被回收，Activity就不会被回收，Activity所关联的资源和视图都不会被回收，发生比较严重的<code>内存泄漏</code>。<br>看这个问题之前，我们先回顾下java的<strong>内部类</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outter</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;&#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(Inner c)</span></span>&#123;</div><div class=\"line\">        System.out.println(c);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">        Outter o1 = <span class=\"keyword\">new</span> Outter();</div><div class=\"line\">        Outter o2 = <span class=\"keyword\">new</span> Outter();</div><div class=\"line\">        Outter.Inner i1 = o1.new Inner();</div><div class=\"line\">        Outter.Inner i2 = o2.new Inner();</div><div class=\"line\">        o1.foo(i2);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>非静态的内部类会持有外部类的一个隐式引用</strong>，上面在Outter类内部定义了Inner类，在后边main里创建了两个Inner实例，注意创建内部类的时候</p>\n<blockquote>\n<p>Outter.Inner i1 = o1.new Inner();</p>\n</blockquote>\n<p><strong>注意：</strong>在用new<strong>创建内部类</strong>时，前边必须限定外部对象(内部类实例必须要访问到外部对象引用)：o1；如果是在 Outter类内部这个外部引用可以省略，它<strong>默认会用传递外部this引用</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outter</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span></span>&#123;&#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> Inner(); <span class=\"comment\">// 相当于this.new Inner(); 也可以写为Outter.this.new Inner();</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>换成我们的Activity</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    exampleOne();</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exampleOne</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    newThread() &#123;<span class=\"comment\">//匿名内部类，非静态的匿名类会持有外部类的一个隐式引用</span></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\">publicvoid <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">          SystemClock.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;.start();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个匿名的Thread类会<strong>持有外部的Activity</strong>的对象，从而造成<code>内存泄露</code>。<br>要解决MainActivity的内存泄漏问题，只需把非静态的Thread匿名类定义成静态的内部类就行了（静态的内部类不会持有外部类的一个隐式引用）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> MyThread mThread;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\">protectedvoid <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    exampleThree();</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"function\">privatevoid <span class=\"title\">exampleThree</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    mThread = <span class=\"keyword\">new</span> MyThread();</div><div class=\"line\">    mThread.start();</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mRunning = <span class=\"keyword\">false</span>;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\">publicvoid <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      mRunning = <span class=\"keyword\">true</span>;</div><div class=\"line\">      <span class=\"keyword\">while</span>(mRunning) &#123;</div><div class=\"line\">        SystemClock.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\">publicvoid <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      mRunning = <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\">protectedvoid <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    <span class=\"keyword\">if</span>(mThread!=<span class=\"keyword\">null</span>)</div><div class=\"line\">        mThread.close();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样当Activity结束销毁时，MyThread不会持有外部Activity的引用也就不会内存泄露。在onDestroy()方法中结束了新创建的线程，保证了thread不会发生泄漏。</p>\n<h4 id=\"其他常见内存泄露方式\"><a href=\"#其他常见内存泄露方式\" class=\"headerlink\" title=\"其他常见内存泄露方式\"></a>其他常见内存泄露方式</h4><ul>\n<li>数据库Cursor没有关闭</li>\n<li>调用registerReceiver后未调用解绑（unregisterReceiver）</li>\n<li>流对象InputStream/OutputStream未关闭</li>\n<li>Bitmap使用后未调用recycle()</li>\n<li>activity使用静态成员</li>\n<li>等等。。。。</li>\n</ul>\n<p>泄露的方式很多，就不一一列举了。怎么去避免，去发现才是关键。下面简单说明下如何发现内存泄露</p>\n<h6 id=\"1-使用开源框架LeakCanary\"><a href=\"#1-使用开源框架LeakCanary\" class=\"headerlink\" title=\"1.使用开源框架LeakCanary\"></a>1.使用开源框架LeakCanary</h6><p>LeakCanary的优点，使用简单，展示效果好。下面介绍如何使用<br>在 <code>build.gradle</code> 中加入引用</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</div><div class=\"line\">  debugCompile <span class=\"string\">'com.squareup.leakcanary:leakcanary-android:1.3'</span></div><div class=\"line\">  releaseCompile <span class=\"string\">'com.squareup.leakcanary:leakcanary-android-no-op:1.3'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在 Application 中注册：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">    LeakCanary.install(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 这样，在 debug的时候，如果检测到某个 activity 有内存泄露，LeakCanary 就是自动地显示一个通知。<br> 更多介绍请看<a href=\"https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/\" target=\"_blank\" rel=\"external\">LeakCanary 中文使用说明</a></p>\n<h6 id=\"2-使用Android-Studio自带工具\"><a href=\"#2-使用Android-Studio自带工具\" class=\"headerlink\" title=\"2.使用Android Studio自带工具\"></a>2.使用Android Studio自带工具</h6><p>打开Android Studio，编译代码，在模拟器或者真机上运行App，然后点击<img src=\"http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161148890.png\" alt=\"mark\">，在Android Monitor下点击Monitor对应的Tab，进入如下界面<br><img src=\"http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161234794.png\" alt=\"mark\"><br>在Memory一栏中，可以观察不同时间App内存的动态使用情况，<strong>点击<img src=\"http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161348283.png\" alt=\"mark\"></strong>可以手动触发GC，<strong>点击<img src=\"http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161402738.png\" alt=\"mark\"></strong>可以进入HPROF Viewer界面，查看Java的Heap，如下图<br><img src=\"http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161426494.png\" alt=\"mark\"><br><code>Reference Tree</code>代表指向该实例的引用，可以从这里面查看内存泄漏的原因，<code>Shallow Size</code>指的是该对象本身占用内存的大小，<code>Retained Size</code>代表该对象被释放后，垃圾回收器能回收的内存总和。<br>下面以一个<code>栗子</code>说明，<code>Memory Monitor</code>里面观察App的内存使用曲线，突然发现，纳尼！！！怎么内存使用越来越大了，这就很有可能是发生内存泄漏了，然后点击手动进行GC，再点击观看JavaHeap，<strong>点击Analyzer Task</strong>，Android Monitor就可以为我们自动分析泄漏的Activity啦，分析出来如下图所示<br><img src=\"http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161633995.png\" alt=\"mark\"><br>点击直接定位到该单例中的代码，发现代码中出现了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> VideoTagHelper <span class=\"title\">getInstance</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (tagHelper == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            tagHelper = <span class=\"keyword\">new</span> VideoTagHelper();</div><div class=\"line\">        &#125;</div><div class=\"line\">        tagHelper.context = context;</div><div class=\"line\">        <span class=\"keyword\">return</span> tagHelper;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>我们可以看到持有该Activity的单例对象,导致了内存泄露。直接修改为context.getApplicationContext()即可。这样就和Activity没关系了</p>\n<h6 id=\"3-使用MAT分析\"><a href=\"#3-使用MAT分析\" class=\"headerlink\" title=\"3.使用MAT分析\"></a>3.使用MAT分析</h6><p>使用<code>Memory Monitor</code>导出hprof文件， 这个文件在Android Studio中的Captrues这个目录中可以看到。<br><img src=\"http://ogzf36bsb.bkt.clouddn.com/blog/20161122/171011086.png\" alt=\"@hprof文件目录| center\"></p>\n","excerpt":"","more":"<h4 id=\"Android中的常见内存泄露\"><a href=\"#Android中的常见内存泄露\" class=\"headerlink\" title=\"Android中的常见内存泄露\"></a>Android中的常见内存泄露</h4><p>Android应用程序本身系统分配的内存有限，一旦发生泄漏，程序就会变得卡顿，直至<strong>OOM</strong>崩溃。简单分析下常见的错误</p>\n<h5 id=\"非静态内部类会持有外部类的一个隐式引用\"><a href=\"#非静态内部类会持有外部类的一个隐式引用\" class=\"headerlink\" title=\"非静态内部类会持有外部类的一个隐式引用\"></a>非静态内部类会持有外部类的一个隐式引用</h5><p>  Activity是如何泄漏的，只要<strong>非静态的匿名类对象</strong>没有被回收，Activity就不会被回收，Activity所关联的资源和视图都不会被回收，发生比较严重的<code>内存泄漏</code>。<br>看这个问题之前，我们先回顾下java的<strong>内部类</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outter</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;&#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(Inner c)</span></span>&#123;</div><div class=\"line\">        System.out.println(c);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span><span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">        Outter o1 = <span class=\"keyword\">new</span> Outter();</div><div class=\"line\">        Outter o2 = <span class=\"keyword\">new</span> Outter();</div><div class=\"line\">        Outter.Inner i1 = o1.new Inner();</div><div class=\"line\">        Outter.Inner i2 = o2.new Inner();</div><div class=\"line\">        o1.foo(i2);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>非静态的内部类会持有外部类的一个隐式引用</strong>，上面在Outter类内部定义了Inner类，在后边main里创建了两个Inner实例，注意创建内部类的时候</p>\n<blockquote>\n<p>Outter.Inner i1 = o1.new Inner();</p>\n</blockquote>\n<p><strong>注意：</strong>在用new<strong>创建内部类</strong>时，前边必须限定外部对象(内部类实例必须要访问到外部对象引用)：o1；如果是在 Outter类内部这个外部引用可以省略，它<strong>默认会用传递外部this引用</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outter</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span></span>&#123;&#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> Inner(); <span class=\"comment\">// 相当于this.new Inner(); 也可以写为Outter.this.new Inner();</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>换成我们的Activity</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    exampleOne();</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">exampleOne</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    newThread() &#123;<span class=\"comment\">//匿名内部类，非静态的匿名类会持有外部类的一个隐式引用</span></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\">publicvoid <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</div><div class=\"line\">          SystemClock.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;.start();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个匿名的Thread类会<strong>持有外部的Activity</strong>的对象，从而造成<code>内存泄露</code>。<br>要解决MainActivity的内存泄漏问题，只需把非静态的Thread匿名类定义成静态的内部类就行了（静态的内部类不会持有外部类的一个隐式引用）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> MyThread mThread;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\">protectedvoid <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    exampleThree();</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"function\">privatevoid <span class=\"title\">exampleThree</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    mThread = <span class=\"keyword\">new</span> MyThread();</div><div class=\"line\">    mThread.start();</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mRunning = <span class=\"keyword\">false</span>;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\">publicvoid <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      mRunning = <span class=\"keyword\">true</span>;</div><div class=\"line\">      <span class=\"keyword\">while</span>(mRunning) &#123;</div><div class=\"line\">        SystemClock.sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\">publicvoid <span class=\"title\">close</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      mRunning = <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\">protectedvoid <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    <span class=\"keyword\">if</span>(mThread!=<span class=\"keyword\">null</span>)</div><div class=\"line\">        mThread.close();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样当Activity结束销毁时，MyThread不会持有外部Activity的引用也就不会内存泄露。在onDestroy()方法中结束了新创建的线程，保证了thread不会发生泄漏。</p>\n<h4 id=\"其他常见内存泄露方式\"><a href=\"#其他常见内存泄露方式\" class=\"headerlink\" title=\"其他常见内存泄露方式\"></a>其他常见内存泄露方式</h4><ul>\n<li>数据库Cursor没有关闭</li>\n<li>调用registerReceiver后未调用解绑（unregisterReceiver）</li>\n<li>流对象InputStream/OutputStream未关闭</li>\n<li>Bitmap使用后未调用recycle()</li>\n<li>activity使用静态成员</li>\n<li>等等。。。。</li>\n</ul>\n<p>泄露的方式很多，就不一一列举了。怎么去避免，去发现才是关键。下面简单说明下如何发现内存泄露</p>\n<h6 id=\"1-使用开源框架LeakCanary\"><a href=\"#1-使用开源框架LeakCanary\" class=\"headerlink\" title=\"1.使用开源框架LeakCanary\"></a>1.使用开源框架LeakCanary</h6><p>LeakCanary的优点，使用简单，展示效果好。下面介绍如何使用<br>在 <code>build.gradle</code> 中加入引用</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</div><div class=\"line\">  debugCompile <span class=\"string\">'com.squareup.leakcanary:leakcanary-android:1.3'</span></div><div class=\"line\">  releaseCompile <span class=\"string\">'com.squareup.leakcanary:leakcanary-android-no-op:1.3'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在 Application 中注册：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">    LeakCanary.install(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 这样，在 debug的时候，如果检测到某个 activity 有内存泄露，LeakCanary 就是自动地显示一个通知。<br> 更多介绍请看<a href=\"https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/\">LeakCanary 中文使用说明</a></p>\n<h6 id=\"2-使用Android-Studio自带工具\"><a href=\"#2-使用Android-Studio自带工具\" class=\"headerlink\" title=\"2.使用Android Studio自带工具\"></a>2.使用Android Studio自带工具</h6><p>打开Android Studio，编译代码，在模拟器或者真机上运行App，然后点击<img src=\"http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161148890.png\" alt=\"mark\">，在Android Monitor下点击Monitor对应的Tab，进入如下界面<br><img src=\"http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161234794.png\" alt=\"mark\"><br>在Memory一栏中，可以观察不同时间App内存的动态使用情况，<strong>点击<img src=\"http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161348283.png\" alt=\"mark\"></strong>可以手动触发GC，<strong>点击<img src=\"http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161402738.png\" alt=\"mark\"></strong>可以进入HPROF Viewer界面，查看Java的Heap，如下图<br><img src=\"http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161426494.png\" alt=\"mark\"><br><code>Reference Tree</code>代表指向该实例的引用，可以从这里面查看内存泄漏的原因，<code>Shallow Size</code>指的是该对象本身占用内存的大小，<code>Retained Size</code>代表该对象被释放后，垃圾回收器能回收的内存总和。<br>下面以一个<code>栗子</code>说明，<code>Memory Monitor</code>里面观察App的内存使用曲线，突然发现，纳尼！！！怎么内存使用越来越大了，这就很有可能是发生内存泄漏了，然后点击手动进行GC，再点击观看JavaHeap，<strong>点击Analyzer Task</strong>，Android Monitor就可以为我们自动分析泄漏的Activity啦，分析出来如下图所示<br><img src=\"http://ogzf36bsb.bkt.clouddn.com/blog/20161122/161633995.png\" alt=\"mark\"><br>点击直接定位到该单例中的代码，发现代码中出现了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> VideoTagHelper <span class=\"title\">getInstance</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (tagHelper == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            tagHelper = <span class=\"keyword\">new</span> VideoTagHelper();</div><div class=\"line\">        &#125;</div><div class=\"line\">        tagHelper.context = context;</div><div class=\"line\">        <span class=\"keyword\">return</span> tagHelper;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>我们可以看到持有该Activity的单例对象,导致了内存泄露。直接修改为context.getApplicationContext()即可。这样就和Activity没关系了</p>\n<h6 id=\"3-使用MAT分析\"><a href=\"#3-使用MAT分析\" class=\"headerlink\" title=\"3.使用MAT分析\"></a>3.使用MAT分析</h6><p>使用<code>Memory Monitor</code>导出hprof文件， 这个文件在Android Studio中的Captrues这个目录中可以看到。<br><img src=\"http://ogzf36bsb.bkt.clouddn.com/blog/20161122/171011086.png\" alt=\"@hprof文件目录| center\"></p>\n"},{"title":"Xposed模块","date":"2016-11-21T09:18:51.000Z","_content":"\n\nIXposedMod接口定义了Xposed模块。但用户不能直接实现这个接口(具体原因参见XposedBridge的main方法)，只能实现作者定义好的四个接口，每个接口用于特定的用途：\n```java\n//用于修改app的资源文件\npublic interface IXposedHookInitPackageResources extends IXposedMod{}\n\n//用于hook应用的代码\npublic interface IXposedHookLoadPackage extends IXposedMod{}\n//在Zygote初始化时执行\npublic interface IXposedHookZygoteInit extends IXposedMod {}\n\n/**用于hook基于java的命令行工具(例如pm)。它需要app_process 55版本，还需要在XposedInstaller的data目录下创建一个特殊文件(conf/enable_for_tools)*/\npublic interface IXposedHookCmdInit extends IXposedMod{}\n```\n<!--more-->\n![@类加载过程 |center](http://ogzf36bsb.bkt.clouddn.com/blog/20161121/172513110.png)\n从上图可以发现Xposed Module的类加载器与要运行Apk的类加载器都继承自PathClassLoader，但它们之间相互独立，每个ClassLoader只用于加载某一特定的apk(dex)，所以在Xposed module中如果要加载apk中的类需要用原应用的ApkClassLoader进行加载。\n\n### Hook过程\n- **Find:** 通过特定的类加载器加载要hook的类，通过反射找到被hook的成员。\n- **Hook:** 被hook成员调用前后执行特定的回调方法。\n\n工具类XposedHelpers提供了一些工具方法来简化find过程；XposedBridge的hook*方法用于处理hook并执行回调。\n\n#### find\n| XposedHelpers静态方法| - |\n| :--------:  |:----: |\n| findClass | 使用classLoader加载class |\n| findField*| 通过反射查找类的数据成员并设置可访问性(setAccessible(true)) |\n| findMethod*| 通过反射查找类的成员函数并设置可访问性  |\n| findConstructor*| 通过反射查找类的构造函数并设置可访问性 |\n| setStatic*|通过反射设置类静态变量的值 |\n| set*|  通过反射设置对象数据成员的值 |\n| findAndHook*| 查找并hook  |\n\n#### hook\nXC_MethodHook中定义了回调方法：\n> beforeHookedMethod(MethodHookParam param)：\n> 被hook方法调用前执行，调用param.setResult可以跳过被hook的方法\n> \n> afterHookedMethod(MethodHookParam param) ：\n>  被hook方法调用后执行，调用param.setResult更改被hook方法的执行结果。\n\nXC_MethodReplacement继承自XC_MethodHook，通过在beforeHookedMethod中调用param.setResult**实现了方法的替换**。\n``` java\n\n/**以beforeHookedMethod为例，如何修改方法返回值*/\n@Override\nprotected final void beforeHookedMethod(MethodHookParam param) throws Throwable {\n    try {\n\t\t //对hook的方法修改后的结果\n        Object result = replaceHookedMethod(param);\n        //设置修改后的结果为原方法（被Hook的函数）的结果返回\n        param.setResult(result);\n    } catch (Throwable t) {\n        param.setThrowable(t);\n    }\n}\n```\n#### 最后\n当然还有一些Xposed模版的操作，拷贝jar包，在AndroidManifest.xml中声明相应的mata标签之类的就不一一叙述了。\n[Xposed](http://repo.xposed.info/module/de.robv.android.xposed.installer)","source":"_posts/xposed.md","raw":"---\ntitle: Xposed模块\ndate: 2016-11-21 17:18:51\ntags: [xposed,xposed模块,hook]\n---\n\n\nIXposedMod接口定义了Xposed模块。但用户不能直接实现这个接口(具体原因参见XposedBridge的main方法)，只能实现作者定义好的四个接口，每个接口用于特定的用途：\n```java\n//用于修改app的资源文件\npublic interface IXposedHookInitPackageResources extends IXposedMod{}\n\n//用于hook应用的代码\npublic interface IXposedHookLoadPackage extends IXposedMod{}\n//在Zygote初始化时执行\npublic interface IXposedHookZygoteInit extends IXposedMod {}\n\n/**用于hook基于java的命令行工具(例如pm)。它需要app_process 55版本，还需要在XposedInstaller的data目录下创建一个特殊文件(conf/enable_for_tools)*/\npublic interface IXposedHookCmdInit extends IXposedMod{}\n```\n<!--more-->\n![@类加载过程 |center](http://ogzf36bsb.bkt.clouddn.com/blog/20161121/172513110.png)\n从上图可以发现Xposed Module的类加载器与要运行Apk的类加载器都继承自PathClassLoader，但它们之间相互独立，每个ClassLoader只用于加载某一特定的apk(dex)，所以在Xposed module中如果要加载apk中的类需要用原应用的ApkClassLoader进行加载。\n\n### Hook过程\n- **Find:** 通过特定的类加载器加载要hook的类，通过反射找到被hook的成员。\n- **Hook:** 被hook成员调用前后执行特定的回调方法。\n\n工具类XposedHelpers提供了一些工具方法来简化find过程；XposedBridge的hook*方法用于处理hook并执行回调。\n\n#### find\n| XposedHelpers静态方法| - |\n| :--------:  |:----: |\n| findClass | 使用classLoader加载class |\n| findField*| 通过反射查找类的数据成员并设置可访问性(setAccessible(true)) |\n| findMethod*| 通过反射查找类的成员函数并设置可访问性  |\n| findConstructor*| 通过反射查找类的构造函数并设置可访问性 |\n| setStatic*|通过反射设置类静态变量的值 |\n| set*|  通过反射设置对象数据成员的值 |\n| findAndHook*| 查找并hook  |\n\n#### hook\nXC_MethodHook中定义了回调方法：\n> beforeHookedMethod(MethodHookParam param)：\n> 被hook方法调用前执行，调用param.setResult可以跳过被hook的方法\n> \n> afterHookedMethod(MethodHookParam param) ：\n>  被hook方法调用后执行，调用param.setResult更改被hook方法的执行结果。\n\nXC_MethodReplacement继承自XC_MethodHook，通过在beforeHookedMethod中调用param.setResult**实现了方法的替换**。\n``` java\n\n/**以beforeHookedMethod为例，如何修改方法返回值*/\n@Override\nprotected final void beforeHookedMethod(MethodHookParam param) throws Throwable {\n    try {\n\t\t //对hook的方法修改后的结果\n        Object result = replaceHookedMethod(param);\n        //设置修改后的结果为原方法（被Hook的函数）的结果返回\n        param.setResult(result);\n    } catch (Throwable t) {\n        param.setThrowable(t);\n    }\n}\n```\n#### 最后\n当然还有一些Xposed模版的操作，拷贝jar包，在AndroidManifest.xml中声明相应的mata标签之类的就不一一叙述了。\n[Xposed](http://repo.xposed.info/module/de.robv.android.xposed.installer)","slug":"xposed","published":1,"updated":"2016-11-21T09:51:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgerv96u0009ht9o3eb0lbpu","content":"<p>IXposedMod接口定义了Xposed模块。但用户不能直接实现这个接口(具体原因参见XposedBridge的main方法)，只能实现作者定义好的四个接口，每个接口用于特定的用途：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//用于修改app的资源文件</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IXposedHookInitPackageResources</span> <span class=\"keyword\">extends</span> <span class=\"title\">IXposedMod</span></span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//用于hook应用的代码</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IXposedHookLoadPackage</span> <span class=\"keyword\">extends</span> <span class=\"title\">IXposedMod</span></span>&#123;&#125;</div><div class=\"line\"><span class=\"comment\">//在Zygote初始化时执行</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IXposedHookZygoteInit</span> <span class=\"keyword\">extends</span> <span class=\"title\">IXposedMod</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**用于hook基于java的命令行工具(例如pm)。它需要app_process 55版本，还需要在XposedInstaller的data目录下创建一个特殊文件(conf/enable_for_tools)*/</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IXposedHookCmdInit</span> <span class=\"keyword\">extends</span> <span class=\"title\">IXposedMod</span></span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p><img src=\"http://ogzf36bsb.bkt.clouddn.com/blog/20161121/172513110.png\" alt=\"@类加载过程 |center\"><br>从上图可以发现Xposed Module的类加载器与要运行Apk的类加载器都继承自PathClassLoader，但它们之间相互独立，每个ClassLoader只用于加载某一特定的apk(dex)，所以在Xposed module中如果要加载apk中的类需要用原应用的ApkClassLoader进行加载。</p>\n<h3 id=\"Hook过程\"><a href=\"#Hook过程\" class=\"headerlink\" title=\"Hook过程\"></a>Hook过程</h3><ul>\n<li><strong>Find:</strong> 通过特定的类加载器加载要hook的类，通过反射找到被hook的成员。</li>\n<li><strong>Hook:</strong> 被hook成员调用前后执行特定的回调方法。</li>\n</ul>\n<p>工具类XposedHelpers提供了一些工具方法来简化find过程；XposedBridge的hook*方法用于处理hook并执行回调。</p>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">XposedHelpers静态方法</th>\n<th style=\"text-align:center\">-</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">findClass</td>\n<td style=\"text-align:center\">使用classLoader加载class</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">findField*</td>\n<td style=\"text-align:center\">通过反射查找类的数据成员并设置可访问性(setAccessible(true))</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">findMethod*</td>\n<td style=\"text-align:center\">通过反射查找类的成员函数并设置可访问性</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">findConstructor*</td>\n<td style=\"text-align:center\">通过反射查找类的构造函数并设置可访问性</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setStatic*</td>\n<td style=\"text-align:center\">通过反射设置类静态变量的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">set*</td>\n<td style=\"text-align:center\">通过反射设置对象数据成员的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">findAndHook*</td>\n<td style=\"text-align:center\">查找并hook</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"hook\"><a href=\"#hook\" class=\"headerlink\" title=\"hook\"></a>hook</h4><p>XC_MethodHook中定义了回调方法：</p>\n<blockquote>\n<p>beforeHookedMethod(MethodHookParam param)：<br>被hook方法调用前执行，调用param.setResult可以跳过被hook的方法</p>\n<p>afterHookedMethod(MethodHookParam param) ：<br> 被hook方法调用后执行，调用param.setResult更改被hook方法的执行结果。</p>\n</blockquote>\n<p>XC_MethodReplacement继承自XC_MethodHook，通过在beforeHookedMethod中调用param.setResult<strong>实现了方法的替换</strong>。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**以beforeHookedMethod为例，如何修改方法返回值*/</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeHookedMethod</span><span class=\"params\">(MethodHookParam param)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t <span class=\"comment\">//对hook的方法修改后的结果</span></div><div class=\"line\">        Object result = replaceHookedMethod(param);</div><div class=\"line\">        <span class=\"comment\">//设置修改后的结果为原方法（被Hook的函数）的结果返回</span></div><div class=\"line\">        param.setResult(result);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</div><div class=\"line\">        param.setThrowable(t);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h4><p>当然还有一些Xposed模版的操作，拷贝jar包，在AndroidManifest.xml中声明相应的mata标签之类的就不一一叙述了。<br><a href=\"http://repo.xposed.info/module/de.robv.android.xposed.installer\" target=\"_blank\" rel=\"external\">Xposed</a></p>\n","excerpt":"<p>IXposedMod接口定义了Xposed模块。但用户不能直接实现这个接口(具体原因参见XposedBridge的main方法)，只能实现作者定义好的四个接口，每个接口用于特定的用途：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//用于修改app的资源文件</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IXposedHookInitPackageResources</span> <span class=\"keyword\">extends</span> <span class=\"title\">IXposedMod</span></span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//用于hook应用的代码</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IXposedHookLoadPackage</span> <span class=\"keyword\">extends</span> <span class=\"title\">IXposedMod</span></span>&#123;&#125;</div><div class=\"line\"><span class=\"comment\">//在Zygote初始化时执行</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IXposedHookZygoteInit</span> <span class=\"keyword\">extends</span> <span class=\"title\">IXposedMod</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**用于hook基于java的命令行工具(例如pm)。它需要app_process 55版本，还需要在XposedInstaller的data目录下创建一个特殊文件(conf/enable_for_tools)*/</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IXposedHookCmdInit</span> <span class=\"keyword\">extends</span> <span class=\"title\">IXposedMod</span></span>&#123;&#125;</div></pre></td></tr></table></figure></p>","more":"<p><img src=\"http://ogzf36bsb.bkt.clouddn.com/blog/20161121/172513110.png\" alt=\"@类加载过程 |center\"><br>从上图可以发现Xposed Module的类加载器与要运行Apk的类加载器都继承自PathClassLoader，但它们之间相互独立，每个ClassLoader只用于加载某一特定的apk(dex)，所以在Xposed module中如果要加载apk中的类需要用原应用的ApkClassLoader进行加载。</p>\n<h3 id=\"Hook过程\"><a href=\"#Hook过程\" class=\"headerlink\" title=\"Hook过程\"></a>Hook过程</h3><ul>\n<li><strong>Find:</strong> 通过特定的类加载器加载要hook的类，通过反射找到被hook的成员。</li>\n<li><strong>Hook:</strong> 被hook成员调用前后执行特定的回调方法。</li>\n</ul>\n<p>工具类XposedHelpers提供了一些工具方法来简化find过程；XposedBridge的hook*方法用于处理hook并执行回调。</p>\n<h4 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">XposedHelpers静态方法</th>\n<th style=\"text-align:center\">-</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">findClass</td>\n<td style=\"text-align:center\">使用classLoader加载class</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">findField*</td>\n<td style=\"text-align:center\">通过反射查找类的数据成员并设置可访问性(setAccessible(true))</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">findMethod*</td>\n<td style=\"text-align:center\">通过反射查找类的成员函数并设置可访问性</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">findConstructor*</td>\n<td style=\"text-align:center\">通过反射查找类的构造函数并设置可访问性</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">setStatic*</td>\n<td style=\"text-align:center\">通过反射设置类静态变量的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">set*</td>\n<td style=\"text-align:center\">通过反射设置对象数据成员的值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">findAndHook*</td>\n<td style=\"text-align:center\">查找并hook</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"hook\"><a href=\"#hook\" class=\"headerlink\" title=\"hook\"></a>hook</h4><p>XC_MethodHook中定义了回调方法：</p>\n<blockquote>\n<p>beforeHookedMethod(MethodHookParam param)：<br>被hook方法调用前执行，调用param.setResult可以跳过被hook的方法</p>\n<p>afterHookedMethod(MethodHookParam param) ：<br> 被hook方法调用后执行，调用param.setResult更改被hook方法的执行结果。</p>\n</blockquote>\n<p>XC_MethodReplacement继承自XC_MethodHook，通过在beforeHookedMethod中调用param.setResult<strong>实现了方法的替换</strong>。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**以beforeHookedMethod为例，如何修改方法返回值*/</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeHookedMethod</span><span class=\"params\">(MethodHookParam param)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t <span class=\"comment\">//对hook的方法修改后的结果</span></div><div class=\"line\">        Object result = replaceHookedMethod(param);</div><div class=\"line\">        <span class=\"comment\">//设置修改后的结果为原方法（被Hook的函数）的结果返回</span></div><div class=\"line\">        param.setResult(result);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</div><div class=\"line\">        param.setThrowable(t);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h4><p>当然还有一些Xposed模版的操作，拷贝jar包，在AndroidManifest.xml中声明相应的mata标签之类的就不一一叙述了。<br><a href=\"http://repo.xposed.info/module/de.robv.android.xposed.installer\">Xposed</a></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjgerv96i0000ht9onvgzulqx","tag_id":"cjgerv96o0002ht9otylw7zpw","_id":"cjgerv96s0007ht9o9cesrfgj"},{"post_id":"cjgerv96m0001ht9o334xtkt1","tag_id":"cjgerv96r0006ht9oejw7svgz","_id":"cjgerv96w000cht9ogh4i79e6"},{"post_id":"cjgerv96m0001ht9o334xtkt1","tag_id":"cjgerv96u000aht9oa4j3vcfw","_id":"cjgerv96w000dht9ojb28ylce"},{"post_id":"cjgerv96p0003ht9orh7sglcv","tag_id":"cjgerv96v000bht9oijb58iiw","_id":"cjgerv96x000hht9old6p9ti8"},{"post_id":"cjgerv96p0003ht9orh7sglcv","tag_id":"cjgerv96w000eht9o63vi2wez","_id":"cjgerv96x000iht9o27liykvs"},{"post_id":"cjgerv96p0003ht9orh7sglcv","tag_id":"cjgerv96w000fht9onq22ilyw","_id":"cjgerv96y000kht9o2shj1xfp"},{"post_id":"cjgerv96q0004ht9o3cb2e1ka","tag_id":"cjgerv96x000ght9ogkhiwiw4","_id":"cjgerv96z000oht9ofheyb808"},{"post_id":"cjgerv96q0004ht9o3cb2e1ka","tag_id":"cjgerv96x000jht9o7wvp5xdb","_id":"cjgerv971000pht9oidv57gff"},{"post_id":"cjgerv96q0004ht9o3cb2e1ka","tag_id":"cjgerv96y000lht9oejaykp39","_id":"cjgerv971000rht9orsmlhz1q"},{"post_id":"cjgerv96q0004ht9o3cb2e1ka","tag_id":"cjgerv96z000mht9o902dd2jg","_id":"cjgerv971000sht9o39p336v2"},{"post_id":"cjgerv96r0005ht9ogbmz39mb","tag_id":"cjgerv96z000nht9olnsgc56u","_id":"cjgerv972000uht9oorz96wm5"},{"post_id":"cjgerv96u0009ht9o3eb0lbpu","tag_id":"cjgerv971000qht9o8g1xd5zm","_id":"cjgerv973000wht9oxls6qz3h"},{"post_id":"cjgerv96u0009ht9o3eb0lbpu","tag_id":"cjgerv972000tht9ozwtunwdz","_id":"cjgerv973000xht9o7czklo6b"},{"post_id":"cjgerv96u0009ht9o3eb0lbpu","tag_id":"cjgerv972000vht9ow2aehxbg","_id":"cjgerv973000yht9orafjho9s"}],"Tag":[{"name":"CI","_id":"cjgerv96o0002ht9otylw7zpw"},{"name":"Android","_id":"cjgerv96r0006ht9oejw7svgz"},{"name":"tips","_id":"cjgerv96u000aht9oa4j3vcfw"},{"name":"hexo","_id":"cjgerv96v000bht9oijb58iiw"},{"name":"bolg","_id":"cjgerv96w000eht9o63vi2wez"},{"name":"随记","_id":"cjgerv96w000fht9onq22ilyw"},{"name":"sql","_id":"cjgerv96x000ght9ogkhiwiw4"},{"name":"SQLite","_id":"cjgerv96x000jht9o7wvp5xdb"},{"name":"数据库","_id":"cjgerv96y000lht9oejaykp39"},{"name":"stetho","_id":"cjgerv96z000mht9o902dd2jg"},{"name":"git","_id":"cjgerv96z000nht9olnsgc56u"},{"name":"xposed","_id":"cjgerv971000qht9o8g1xd5zm"},{"name":"xposed模块","_id":"cjgerv972000tht9ozwtunwdz"},{"name":"hook","_id":"cjgerv972000vht9ow2aehxbg"}]}}